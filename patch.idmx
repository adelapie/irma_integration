diff -uNr irma_card/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.delete.log integration/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.delete.log
--- irma_card/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.delete.log	2014-09-03 14:58:34.847038740 +0200
+++ integration/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.delete.log	1970-01-01 01:00:00.000000000 +0100
@@ -1,4 +0,0 @@
-Send: be180000f50111440100000000093260026b026b0048008000000103000000000000000000000000000000000000000000000000000000000000000000000212000005ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000100000000000000000109f849524d4163617264ffffffffffffff000000000000000022b73679e20ec407a4495eb50d411a63426d63721f6df1e904d8a607485207579aa29a67d3f553f4cc175bded847d12b1fe82f3e18abab9eca836ddd2b42eecc44724923f57f7dd24cf8f3682c5ce8ad65e93115516d34fba304f1716214d628723629e1
-Recv: (9000) 30 ms
-Send: be1800001c7e400082e34ab03e2d81e28522947023ebbdcd021a1c4ce87cef5ace
-Recv: (9000) 1251 ms
diff -uNr irma_card/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.load.log integration/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.load.log
--- irma_card/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.load.log	2014-09-03 14:58:34.847038740 +0200
+++ integration/card/IRMAcard-0.8-beta0_ML3-36K-R1_fix.load.log	1970-01-01 01:00:00.000000000 +0100
@@ -1,350 +0,0 @@
-Send: be1200009d000000000000000000000000000000000000000000000000000000000000000212000005ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000100000000000000000109f849524d4163617264ffffffffffffff0000000000000000002bb77c99021000480000001700180007140832702cfb916c5c2a5558ff8dbd4eae777ee63802
-Recv: (9000) 1181 ms
-Send: be2000001761154f09f849524d4163617264500849524d4163617264
-Recv: (9000) 10 ms
-Send: be220000186f16a5141012020100020108100a0c05616c706861020100
-Recv: (9000) 20 ms
-Send: be240000ff171a9621006c8000003c02fffa988000908080260d14c402fff63c04fff6d802263c01fffb5001260f430f22c402fff63c04fff6d802263c01fffb5001263c02fffa2a0302084402fffabc0100003c02fffa988000908000260cd1c402fff63c04fff6d802263c0100005001263c02fff62f06022002ac0200000f04bc0200003c0200003c02fff8d802264801400140017000250e0d3c02fffac002d4020000260ad93c020000e402fffa263c02fffae402fff4263c02fffa3c04fff4d802263c0200003c02fff8d80226280f3c04fff4d802264801400140012a0183807000250914c402fff43c04fff4d802262100500126bc02fffa3c08fff440021f00
-Recv: (9000) 31 ms
-Send: be2400ffff03c0024402fff43c04fff4d8022621025001263c02fff42f08023c06fff61f0003c0024402fff63c04fff6d8022621305001263c02fff62f06023c06fff61f018b908000260a0622ffff2f06023c06fff69800021f0237908000260a0622ffff2f06023c02fffa9800043c02fff85002264c04fffa40022a0202013c02fff6d802264402fff62200012f06024c02fff63c02fff8d802264801400140012a01831f7000250e2321004c02fff64c02fff6b8025402fff63c02fff8d802264801400140015402fffa0f694c02fff6b8023c02fff8d802264801400140012a0183807000250e4721004c02fff64c02fff6b8025402fff63c02fff8d80226480140
-Recv: (9000) 40 ms
-Send: be2401feff0140012a02020821004c02fff64c02fff6b8025402fff63c02fff8d80226480140014001f002265402fffa0f0622ffff2f06022200012f060221004c02fff64c02fff6b8025402fff63c02fff8d8022648014401000026748000000d0d21003c0100005402fffa1702f221003c0100002b0183007f9000010e03260f0b9000020e03260f24260f6621004c02fff64c02fff6b8025402fff63c02fff8d802264801400140015402fffa21004c02fff64c02fff6b8025402fff63c02fff8d802264801400140012a02020821004c02fff64c02fff6b8025402fff63c02fff8d80226480140014001f002265402fffa22ffff2f06022200012f060221003c02ff
-Recv: (9000) 30 ms
-Send: be2402fdfffa9801e24801400140012a0202043c02fffad802269800025402fffa3c02fffa9801e221003c02fffa9801e2480140014001b80222001e1f2b14400240015001264c02fffa2f020221003c02fffa9801e248014001400198003cc00221003c01fff922001e1f2b144002e00288001e1f2b1440022a0202043c02fffad802269800022f030221003b01000021003c02fffa98000a480140014001e80226b0022609062200012f020222ffff21003c02fffa9800094801400140012910022f020220022f02023c02fffa9800094801400140017000250e0520022f0602b402fff80964940008fff8090622ff9d2f06022200083c02fffa3c02fff61f2b96b002
-Recv: (9000) 30 ms
-Send: be2403fcff2609263c02fffa980009480180015001263c02fffa98000a4801400140012a0180ffeb010000250f1e3c02fffa98000921035001263c02fffa98000a480140014001f3010000253c02fffa1f03822f06022002940010fff80e293c02fff62200083c02fffa1f03c2380244020000988000908000260c073c0200002f06029c0008fff6ac0200000f203c0200003c02fff6d802264801400140017000250e0622ff9d2f0602bc0200003c02000098800021003c02fffa980008480140014001988000d00224040ac12200083c02fffa3c02fff6280f3c02fffa980009210350018800012f06022018ac0600123c02fff620063c02fff648084008b80850083c
-Recv: (9000) 30 ms
-Send: be2404fbff0200123c02fffad802264801400140017087251605d8bc0200123c0200123c02fffad802264801400140017080250b2221003c020012bc0200123c02fffad802264801400140012b0183007f440200160f058c00010016ac0200100f3721003c0200123c020010d802263c02fffad802264801400140013c020016c0023c020010e002262a0202031f2b55dc02001426bc0200103c020016d4020010260abe3c020016dc020012263c020012bc0200123c02fffad80226480140014001700125090622ffff2f0602c40200143c020012440200163c020014dc020012263c0200123c02fffad802264801400140017097250e3fbc0200123c0200123c02fffa
-Recv: (9000) 40 ms
-Send: be2405faffd80226480140014001700125090622ffff2f06022100bc0200123c0200123c02fffad802264801400140014702fffabc0200123c0200123c02fffad80226480140014001708e250e183c020012b8023c02fffad80226480140014001700825090622ffff2f0602ac0200103c02fff83c02fff62913089c000800103c020010bc0200103c02fff8d802263f01fff35001263c020010bc0200103c02fff8d802263f01fff45001263c020010bc0200103c02fff8d802263f01fff55001263c020010bc0200103c02fff8d802263f01fff65001263c0200103c02fffa1f0993440200103c0200123c0200103c02fff8d802263c02fffa280f3c020010dc020016
-Recv: (9000) 30 ms
-Send: be2406f9ff263c020012dc020010263c0200103c02fff81f09934402001020023c02fff69800182200105c00003c02fff83c0200101f13222200103c0200123c02fffad802269800025c00001f2b96b00226090622fffe2f0602b4020014094b2200103c02fff69800083c02001422001020023c02fffa3c0200163c02fff8d802262ada06023c0200144702fff85ffff83c02fffa1f09d2908000260a0622fffd2f06023f02fff82f060220022f06022004ac0200003c02fff620063c02fff648084008b8085008b702fffc1108ae3f02fffc3c02fffa1f09934702fffc3c020000bc0200003c02fff8d8022621875001263f02fffcb802900080260d1a3c020000bc02
-Recv: (9000) 40 ms
-Send: be2407f8ff00003c02fff8d802263f01fffd78015001260f5f3c020000bc0200003c02fff8d8022621019700fffffc0b02b801788050012620029700fffffc0b02b802440200020f293c020000bc0200003c02fff8d802263f02fffcb8023c0200022a0202031f2b6c4001500126c4020002748000020ad13c020000bc0200003c02fff8d8022621015001262200103c02fff69800083f02fffc22001020023c02fffa3c0200003c02fff8d802262adb06023f02fffcdc020000263c020000bc0200003c02fff8d8022621995001263c020000bc0200003c02fff8d8022621025001263c020000bc0200003c02fff8d802263f02fffe2a03020840015001263c020000bc
-Recv: (9000) 30 ms
-Send: be2408f7ff0200003c02fff8d802263f01ffff5001263c0200003c02fff81f0993440200023c02fff898fff83c02fff629130820023c02fff69800182200103c0200003c02fffad802269800023c02fff898fff83c0200029800081f13223c020000bc0200003c02fff8d80226218e5001263c020000bc0200003c02fff8d8022621085001263c0200009800084702fffc3c0200003c02fffa3c02fff8280f2d063c02fff8bc02fff83c02fffad8022621805001260f143c02fff8bc02fff83c02fffad8022621005001263c02fff82b0183000fb002260ede3c02fff82f04024c02fff8b00226091e4c02fff8c00238025402fff83c02fffad802264801400140017000
-Recv: (9000) 30 ms
-Send: be2409f6ff2509d94c02fff83c02fffad80226480140014001708025090622ffff2f04024c02fff82f040220022f04022204505b00bd1f13dd5e00805e00005b00bd22008a3c02fffa1f12482200202200803c04fff83c02fffa9802005e008028c82200805e00005e00803c02fffa28c222059f5b01471f13dd2202515b00721f13dd5e01005e00805b01472200b43c02fffa1f124822004b2200805b00723c02fffa3c02fffa9802005e010028eb2200805e00805e01003c02fffa28c23c02fffa98074a460202008e002002025e0000460202048e008002065e0080460202088e0080020a5e02144602020c8e000a020e22013f5e00805b00522200045e02001f1162
-Recv: (9000) 40 ms
-Send: be240af5ffae2a008020253b2000523b450102291045468a00aa20253b2000523b4500bd291045de6f0080248a3eb40080dbb4014724b4200b3b200052201e3c02fff848204020291020db4b0072244b2200503c02fffa9807401f13dd2d0421003c02fffa9806353b6b00dc3e6b006ad86b246b506b28052a0183082a03010343010001730000010904be6a00003c02fffa9805cb204b3b1f00bd3e6a0000d86a246a506a2d0221003c02fff62201801f12c63c02fff69800803c06fff640029805cb2200d53c02fffa1f124822004b2200803c02fffa9805803c02fffa3c02fffa9805003c02fff698008028eb2200803c02fff63c02fff69800803c02fffa28c22200
-Recv: (9000) 30 ms
-Send: be240bf4ff202200803c04fff83c02fffa9802003c02fff698008028c82200803c02fff63c02fff69800803c02fffa28c2ac0100000f5322002022008021003c0100002a0202053c02fffad802269806a03c02fffa21003c0100002a0202073c02fffad802269802803c02fff698008028eb2200803c02fff63c02fff69800803c02fffa28c2bc0100003c02fffa98080a480140014001d4010000250a992200803c06fff640029800801f2b96b00226090622ffff2f06022200012f060220022f06023c02fff62201c31f12c63c02fff82201341f12c622004b2200803c02fffa9805803c02fffa3c02fffa9805003c02fff898003428eb2200802200803c02fffa9807
-Recv: (9000) 40 ms
-Send: be240cf3ff8a3c02fffa3c02fff89800343c02fff628eb2200202200803c02fffa98076a3c02fffa3c02fffa9805003c02fff89800b428eb2200803c02fff89800b43c06fff6400228c23c02fffa98074a5402fff83c02fff89800022200205002263c02fff89800043c02fff89800345002263c02fff89800062200805002263c02fff89800083c02fffa9805005002263c02fff898000a2200805002263c02fff898000c3c02fffa9807405002263c02fff898000e22000a5002263c02fff89800103c02fff89800b45002263c02fff898001222008050028801c33c04fff69800142200053c02fff81f11622200203c02fff89800143c02fffa98076a1f2b96b00226
-Recv: (9000) 30 ms
-Send: be240df2ff090622ffff2f06022200012f060220022f06022100ac0100003c02fffa4880b08028052a01830143010001248273000001090622ffff2f02023c02fffa9801004880b08028052a01830143010001248273000001090622ffff2f02023c02fffa9800804880b08028052a01830143010001248273000001090622ffff2f02020f3421003c010000bc0100002a0202073c02fffad802269802004880b08028052a01830143010001248273000001090622ffff2f020221003c01000098800021003c02fffa98080a480140014001b802988000d00224040aa92200012f02022100ac0100000f3421003c010000bc0100002a0202053c02fffad802269806a048
-Recv: (9000) 30 ms
-Send: be240ef1ff80b08028052a01830143010001248273000001090622ffff2f02023c02fffa98080a480140014001d4010000250ab82200012f02023c02fffa9805004880b08028052a01830143010001248273000001090622ffff2f02023c02fffa980580484bb04b28052a01830143010001244d73000001090622ffff2f02023c02fffa9805cb48d5b0d528052a0183014301000124d773000001090622ffff2f02023c02fffa98076a4820b02028052a01830143010001242273000001090622ffff2f02023c02fffa98074a4820b02028052a01830143010001242273000001090622ffff2f02023c02fffa980740480ab00a28052a01830143010001240c73000001
-Recv: (9000) 30 ms
-Send: be240ff0ff090622ffff2f02023c02fffa98078a4880b08028052a01830143010001248273000001090622ffff2f02022200012f02022012ac0200105c00103c02fff85c00001f013926947f210000090622fffe2f06023c0200044402fff63c0200043c02fff8e00226440200105c00103c02fff85c00001f013926947f4e0000090622fffe2f06023c0200103c02fff8d802263c02fff6e002264402000c5c00103c02fff85c00001f013926945f370000090622fffe2f06023c0200024402000e3c0200044402000a3c06000a40023c02fff63c02000c3c02fffa1f146c908000260a0622ffff2f06022200012f06022002ac0200002d022200203c02fff81f138320
-Recv: (9000) 30 ms
-Send: be2410efff043c02fff82200203c02fffa3c02fff61f144e2d062100ac01000021003c0100002a0202023c02fffad8022648024002d402fff8260e2c21003c0100002a0202023c02fffad80226980002480240023c02fff6e80226d402fff6260e062200012f0602bc010000740800000aae2200012f060220043c02fff2440200023c02fff8c002440200000f3c3c0200023c02fff43c0200002a0202023c02fffad80226480240023c0200002a0202023c02fffad80226980002480240021f007444020002c4020000748000000abe3c0200023c02fff45cfff82200021f00743802440200023c02fff43c02fff23c020002e002261f0119440200023c02fff23c0200
-Recv: (9000) 40 ms
-Send: be2411eeff02e0028800203c02fff63c0200023c02fff4d8022628cf2d0a2200802200ff3c02fff81f2ad9262200802200803c04fff83c02fffa9801003c02fffa98018028eb2200803c02fffa9801803c02fffa9801003c02fffa28c22d043c02fff8988000908080260b552200802200803c02fff83c02fff6d8022698ff803c02fffa3c02fffa9801003c02fff428eb3c02fff8a000802200803c06fff640023c02fffa9801803c02fff228eb2200803c02fff43c02fff23c02fffa28c20f1a3c02fff82200803c06fff640023c02fffa9801003c02fff428eb2d0a0f183c02fff820ff50ff3c02fff89800ff4402fff8a400fffffa3c02fffa9880009080ff260cdb
-Recv: (9000) 30 ms
-Send: be2412edff3c02fffa20023c02fff81f2ad92d0421003c02fffaac01000020ff50ff9800ffbc010000740800000aef201b501b26ac02fffa2d0221002200103c02fff02200103c08fff240023c02fff62adb06026c0100000f2b2200103c02fff62200103c04fff221003c0100002a0202043c02fff8d802263c02fff62adb0602bc01000021003c0100003c02fffa2a030204d00224040ac12d0c20083c04fff8d802264402fffa0f12a40008fffa3c02fffa28c45008a40008fff8940008fff80de7b402fff8092a3c02fff89800072a030203e402fffa2628c4440800003c02fff89800072a0302033c02fffa5c0000280f2d043c02fff89800072a0302033c02fffa
-Recv: (9000) 40 ms
-Send: be2413ecff1f13833c02fff82b01830007b0022609214c01fffa2200ff3c02fff82b01830007c8029800091f2b6c4001e801255401fffa2d04940080fff6090622ffff2f08022200802200803c02fff89800803c02fff83c02fff43c02fffa28eb2200802f08023c0cfff040021f14a3263c02fffa2200803c04fff81f14208800802f0c0220023c04fff23c02fffa3c02fff21f142044020000748000000a020f133c02fff23c0200003c04fff61f1555440200003c0200002f0a0220873c02fff42200145c00003c02fff228cf3c02fff8c80298006da000025c0000d8022621015001263c02fff85c006c3c02fff8e0022698ffff3c02fff6280f2200145c006f1f13
-Recv: (9000) 31 ms
-Send: be2414ebff833c02fffa98001522006b5c006f2200141f15fc20693c02fffa980015486b406bfc6b0000246b3c02fffab8022200145c000022006b1f15fc20123c02fffab80248144014fc14006f24143c02fffab8025c006f2913143c02fffa9800155c000029136b2200802f0a02209b940080fff6090622fff82f08023c02fff498007f48014001400170bc25090622fff82f08025c00083c02fff498006b2913145c003022006b5c00082200141f15fc20693c02fff4486b406bfc6b0030246b74010086090622fff82f08023c02fffa2200145c00083c02fff828cf5c001c5c00872913142200302200145c00305c000028cf2200145c00303c02fff498006b1f2b
-Recv: (9000) 30 ms
-Send: be2415eaff96b00226090622fff82f08022200022f08022018ac0200003c02fff6980014c00222001429080226440200020f443c02fffa3c02fff8d802269800025c00002913023c02fffa9800042200145c00043c02fff828cf2200143c02000029100240023c02fff4d802265c0004291314bc0200003c020002c002d4020000260aaf3c02fffa3c02fff8d802269800025c00002913023c02fffa9800042200145c00043c02fff828cf3c02fff62200143c0200002910024002e0028800143c02000029100240023c02fff4d802265c0004280f2d083c02fff82b01830001b00226090622ffff2f04023c02fff82b01830002b002260e0622fffe2f04023c02fff822
-Recv: (9000) 30 ms
-Send: be2416e9ffffff21003c02fffa98080a480140014001b8021f2b55e80226b00226090622fffd2f04022200012f04020f08bc02fffac402fff84c01fffa70002509ef3c02fff82f040220052200d53c02fffa9805cb1f1713c00222004b3c02fffa9805801f1713e002264402000194008a00010b058c008a00013c020001c80298008b44020003ac0100000f353b02020e21003c0100001f2b6c2b01830001b002260e1a22024f22004a21003c01000029100240025b0052d802261f13ddbc0100003c02fffa98080a480140014001d4010000250bb72201c75e03981f13dd2207f35e02991f13dd3c0200012a020203c0023c0200035e018fd802261f13ddac0100000f
-Recv: (9000) 40 ms
-Send: be2417e8ff1521003c0100005e018fd802262100500126bc01000021003c010000d4020003260cde5e00205e02195e018f22008a3c02fffa1f12482200805e02193c02fffa9805003c02fffa28c25e00a05e00205e02992200ff3c02fffa1f12482200392200805e03983c02fffa5e02195e00a028eb2200805e00205e00a03c02fffa28c2ac0100000f613b02020e21003c0100001f2b6c2b01830001b002260e4622004a22008022004a21003c01000029100240025b0052d802263c02fffa21003c0100002a0202073c02fffad802269802005e00a028eb2200805e00205e00a03c02fffa28c2bc0100003c02fffa98080a480140014001d4010000250b8b5e015f46
-Recv: (9000) 30 ms
-Send: be2418e7ff02017f8e002001815e0219460201838e008001855e0020460201878e008001895e00004602018b8e000a018d22013f5e00205e00002200045e017f1f1162201e3c02fffa9805bc480f400f3e200000291020de3903982440ae3f002020063e4501d420493c02fffa980580484b404b29104b4696005f20063e45018f20493c02fffa980580484b404b29104bde900020249620693c02fffa980635486b406b3e6b008ae06b28052a0183082a03010343010001730000010904be6a0020246b466b008a20683c02fffa9805cb486a406a3e6a0020e06a246a466a0020204a3e2000003e6a008b29106a46d4008b204b3e8b000029106bae6b0020ded5002024
-Recv: (9000) 40 ms
-Send: be2419e6ffd63eff0060deff029924ffac010000171a7f3b02020e21003c0100001f2b6c2b01830001b002260e6c200c3e200000201e74000000091921003c0100002a020205a000203c02fffad802269806a00f043c02fff84820402029102022004a21003c01000029100240025b0052d80226204af04c244c204822004a21003c01000029100240025b0052d80226484a404ad84a244a504abc0100003c02fffa98080a480140014001d4010000251319f82d043f01fff32a01830c700025111b2c21041f2b057000250e1d0167003f01fff32a01830c700025090c5b00285e00ff5e00001f07a4045b00285e00ff5e00001f04e290fffd0e03260f3090fffe0e0326
-Recv: (9000) 30 ms
-Send: be241ae5ff0f2890ffff0e03260f03260f3a0169843f01fff32a01830c700025090c5b00285e00ff5e00001f07a4040169823f01fff32a01830c700025090c5b00285e00ff5e00001f07a40421003f01fff32b018300e39000000e03260f0d9000800e0426171c2326171caf21003f01fff4220026280a090268056102002c4002480240021021031f2b057000250e030567009700befff50903056b003e0203ff3f02fff8d80226900300260b030569003f02fff83e0203ff5e00ffd802265e0000280f3f02fff8de0203ff263f01fff32a0183107000250e21ae0203ff3b0200525e00ff22025c1f1021908000260a030569853b0200521f10dc05900021011f2b0570
-Recv: (9000) 40 ms
-Send: be241be4ff00250e030567005e00005b01545b00541f10e40190000600800f241f1cb33f01fff32a01830c700025090c5b00285e00ff5e00001f07a4041f1d3404056d0021003f01fff42b018300f09000000e03260f1b9000100e03260f309000200e03260f459000300e03260f5a260f5b1f1de33f01fff32a01830c700025090c5b00285e00ff5e00001f07a4041f20233f01fff32a01830c700025090c5b00285e00ff5e00001f07a4041f25f13f01fff32a01830c700025090c5b00285e00ff5e00001f07a4041f282404056d00056e000420027700fff50904016b002c21003f01fff69000000e03260f1e9000010e03260f03260f265e00003f02fff82200101f
-Recv: (9000) 30 ms
-Send: be241ce3ff03c2440200000f175e00003f02fff822001b1f03c2440200000f04016b002c94000100000e040190002c94ff9d00000e040167002c22ffff3c02000029100240022b0183000f2b018263c04702fffe2c2c20027700fff50904016b002c21003f01fff69000000e03260f349000010e03260f03260f543f01fff32a01830c700025970010fff809040167002c5e00003f02fff82200101f044d440200000f2f21003b01000021003901001ae80226b002260e040169822c5e00003f02fff822001b1f044d440200000f04016b002c94000100000e040190002c94ff9d00000e040167002c22ffff3c02000029100240022b0183000f2b018263c04702fffe2c
-Recv: (9000) 30 ms
-Send: be241de2ff2c20023f01fff49000010e03260f0c9000020e03260f4426171ebe3f01fff32a01830c7000250e0e21011f2b057000250e040167002cb120035c28052a01830144010000740000000e040169862c22010022035c1f13dd0190002c7700fff60904016b002c21003f01fff59000020e03260f0b9000030e03260f2f260f583f01fff32a01830c7000250e0a21031f2b057000250907970080fff809030567002202dc5e00002913800f2f3f01fff32a01830c7000250e0a21031f2b057000250907970080fff8090305670022025c5e00002913800f03056b00059000016d002c2c2100b702fff50904016b002c22035c4820b02028052a0183014301000124
-Recv: (9000) 40 ms
-Send: be241ee1ff2273000001090922010022035c1f13ddab0200502200013e0200005b00041f1104b002260e040169852cac01000022081321003c0100002910024002980b8d48024002d6020000260e2f2200033e0200005b00041f1104b002260e040169862c22081321003c010000291002400298037c430200500f420f3522081321003c0100002910024002980b8d48024002b002260e1bb30200500e1522081321003c010000291002400298037c43020050bc010000740f0000121f0fb30200500e040169002c3b0200509808113e0200005002263b02005098080a3e0100035001263b02005098080b3e0300045003263b02005098074a5e00072913202200791f02
-Recv: (9000) 30 ms
-Send: be241fe0fff841020077390200775e0027291304390200779800045b0024291304390200779800082101500126390200779800093b020050980811480240025002268b000100022c21003b010000210039010025e80226b002260e040169822c7710fff40e253f01fff32a01830c70002520023f02fff82003212bd004240809040167002c1f1ec31724b1b3020050090e3b0200022b018300ffb002260e040169852c21003f01fff4220038280a0902680761020040400248024002103b0200022b01830001b0022609093b020002db020002263b0200022b01830002b002260e040169852c3f01fff32a01830c700025970080fff809040167002c21003f01fff59000
-Recv: (9000) 30 ms
-Send: be2420dfff000e03260f1b9000010e03260f2e9000020e03260f179000030e03260f37260f773b0200505e00002913800f6f3b0200509800805e00002913800f603b0200509801005e00002913805e00803b0200501f12070f4721003f01fff698800021003b02005098080a480140014001b802988000d00224040b04016b002c21003f01fff62a0202073b020050d802269802005e00002913800f04016b002c0190002c3b0200022b01830002b0022609153b0200501f0e05b0022609093b020002db020002263b0200022b01830004b002260e040169852c3f01fff32a01830c700025970020fff809040167002c7701fff50a143b02005098080a480140014001d7
-Recv: (9000) 40 ms
-Send: be2421deff01fff5250b04016b002cb620000028052a01830143010001730000010904016a802c21003f01fff52a020205a000203b020050d802269806a05e00002913200190002c3b0200022b01830004b002260e103b0200501f0ed0b002260e040169852c3f01fff32a01830c70002597000afff809040167002c5e02145e000029130a22035c3b0200501f0a213b020002db020002260190000200802c3b0200022b01830008b002260e040169852c3f01fff32a01830c7000250e020f0ab702fff809040167002c21003f01fff59000010e03260f139000020e03260f1b9000030e03260f23260f305e00005b00522913200190000200202c5e00005b01472913b4
-Recv: (9000) 30 ms
-Send: be2422ddff0190000200b42c5e00005b007229134b01900002004b2c016b002c3b0200022b01830008b002260e040169852c3f01fff32a01830c7000250e020f0ab702fff809040167002c5e00003b02005098074029130a3b020002db0200022601900002000a2c3b0200022b01830010b0022609093b020002db020002263b0200022b01830020b002260e040169852c21003f01fff5220050280a0902680561020056400248024002103f01fff32a01830c700025970080fff809040167002c3b0200509805005e000029138017243b3f01fff32a01830c70002597004bfff809040167002c3b0200509805805e000029134b0f6d3f01fff32a01830c7000259700d5
-Recv: (9000) 30 ms
-Send: be2423dcfffff809040167002c3b0200501f0b4f0f4e3f01fff32a01830c700025970020fff809040167002c3b02005098076a5e00002913200f293f01fff32a01830c700025970080fff809040167002c3b02005098078a5e00002913800f04016b002c0190002c3b0200022b01830020b0022609153b0200501f0f26b0022609093b020002db020002263b0200022b01830040b002260e040169852c5b005222035c3b0200501f0b97b002260e040169842c5e00005b00523b0200501f0cb2b002260e040169842c3b020002db020002260190002c016d002c2c2100b702fff50904016b002cab0200505b00522201be1f12c63e0200022b0183fffe3e0200005b0004
-Recv: (9000) 40 ms
-Send: be2424dbff1f1104b002260e040169852cac01000022081321003c0100002910024002980b8d48024002d6020000260e1522081321003c010000291002400298037c43020050bc010000740f00000ac5b30200500e04016a882c3e0200023b0200501f16bc908000260a08ab020050016a802c3b02005098080e480240023b02005098080b48024002f002263e020002e80226b00226091c21003b010000210039010025e80226b002260e08ab0200500169822c3e0200024302020e5e015f5e00042913202200791f02f841020077390200775e0024291304390200779800045b0024291304390200779800082102500126390200779800093b02005098081148024002
-Recv: (9000) 30 ms
-Send: be2425daff5002263902007798000b3b02020e5002268b0f0000022c7720fff40e253f01fff32a01830c70002520023f02fff820032128d004240809040167002c1f24b2172823b3020050090e3b0200022b01830f00b002260e040169852c21003f01fff490002a0e03260f1590002b0e03260f4f90002c0e04261727692617281f3b0200022b01830100b002260e040169852c3f01fff32a01830c70002597000afff809040167002c22035c3b0200501f172d3b020002db020002260190000200202c3b0200022b01830200b0022609093b020002db020002263b0200022b01830400b002260e040169852c21003f01fff59000010e03260f149000020e03260f3790
-Recv: (9000) 40 ms
-Send: be2426d9ff00030e03260f5a261727653f01fff32a01830c7000250e0e21011f2b057000250e040167002c5e00005e02192913800190000200802c3f01fff32a01830c7000250e0e21011f2b057000250e040167002c5e00005e03982913390190000200392c3f01fff32a01830c7000250e0e21011f2b057000250e040167002c5e00005e02992913ff0190000200ff2c016b002c3b0200022b01830400b0022609093b020002db020002263b0200022b01830800b002260e040169852c3f01fff32a01830c7000250e020f0ab702fff809040167002c3b02005098080a480140014001d701fff5250b04016b002c3b02020e21003f01fff51f2b6c2b01830001b00226
-Recv: (9000) 30 ms
-Send: be2427d8ff09245e000021003f01fff52a020205a000203b020050d802269806a02913200190000200202c5e000022004a21003f01fff529100240025b0052d8022629134a01900002004a2c016d002c2c20023b01000021003901001ae80226b002260e040169822c21003f01fff4220062280a09026806610200694002480240021021011f2b057000250e03056700b702fff50904016b002cac01000021003c0100002a0202015e0000d80288081321003c0100002910024002980b8d48024002500226bc010000740f00000acf01900002001e2cb702fff50904016b002c3f01fff32a01830c70002520023f02fff820032102d004240809040167002cac01000022
-Recv: (9000) 30 ms
-Send: be2428d7ff081321003c0100002910024002980b8d48024002d6020000260e1922081321003c010000291002400298037c430200500190002cbc010000740f00000ac1016a882cb30200500e040169852c7700fff509143b02005098080a480140014001d701fff5250b04016b002c7700fff60904016b002c3f01fff32a01830c7000250e020f0ab702fff809040167002c5e000021003f01fff52a020205a000203b020050d802269806a02913200190000200202cb30200500e040169852cb702fff50904016b002c3f01fff32a01830c70002520023f02fff820032104d004240809040167002c3b0200501f12fc2200791f02f841020077390200775e0000291304
-Recv: (9000) 41 ms
-Send: be2429d6ff390200779800045b0024291304390200779800082103500126390200779800093f02fff55002260190002cb30200500e040169852cb702fff50904016b002c3f01fff32a01830c70002520023f02fff820032103d004240809040167002cb702fff809123b02005098080e3e0300005003260190002c21003b02005098080e480346030000240321003b02005098080b48034603000324030190000200062c7700fff60904016b002c3f01fff32a01830c7000250e020f0ab702fff809040167002cac0100002200103f01fff53c010000d801252200791f034521003c0100002a0202045e0000d802261f2b8326bc010000740f00000ace0190000200f02c
-Recv: (9000) 30 ms
-Send: be242ad5e2056d002c20023c02fffa440200000f0c3c01fff954010000bc0200003c02fff6c402fff6b002260ee73c02fffa2f06023c01fffb28012101090268002f01013c02fff89080000a04c802b8023c02fffa9080000a04c802b8022908027480fff80a04c802b8023c01fff8fc01fffa257480fffa0a08cd02fffcbd02fffc2f04043c02fff8b402fffa090a2a020201c402fffa0ef62f04023c02fff8b402fffa090a2a030201c402fffa0ef62f04023c02fffa3c06fff640023c02fff8280c2f060220023c06fff640023c02fff8280b090e0a078c000100000f058cffff00002f0602
-Recv: (9000) 20 ms
-Send: be260000ff00000000000000000000000000000000303030303030000006038030303030000000000403400520242a88b41bff1c1c1b661bfd1bde1c200711121a1b1c1d1f2098217f2221227822f82340243f24ad050102030405238323a923ce23ed2412243706303132333a3b28a9298829192a0128562a752ad500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be2600ffff
-Recv: (9000) 40 ms
-Send: be2601feff
-Recv: (9000) 30 ms
-Send: be2602fdff
-Recv: (9000) 30 ms
-Send: be2603fcff
-Recv: (9000) 40 ms
-Send: be2604fbff
-Recv: (9000) 30 ms
-Send: be2605faff
-Recv: (9000) 40 ms
-Send: be2606f9ff
-Recv: (9000) 30 ms
-Send: be2607f8ff
-Recv: (9000) 40 ms
-Send: be2608f7ff
-Recv: (9000) 30 ms
-Send: be2609f6ff
-Recv: (9000) 30 ms
-Send: be260af5ff
-Recv: (9000) 40 ms
-Send: be260bf4ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 30 ms
-Send: be260cf3ff
-Recv: (9000) 40 ms
-Send: be260df2ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 30 ms
-Send: be260ef1ff
-Recv: (9000) 40 ms
-Send: be260ff0ff
-Recv: (9000) 30 ms
-Send: be2610efff
-Recv: (9000) 41 ms
-Send: be2611eeff
-Recv: (9000) 30 ms
-Send: be2612edff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be2613ecff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 30 ms
-Send: be2614ebff
-Recv: (9000) 30 ms
-Send: be2615eaff
-Recv: (9000) 40 ms
-Send: be2616e9ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 30 ms
-Send: be2617e8ff
-Recv: (9000) 40 ms
-Send: be2618e7ff
-Recv: (9000) 30 ms
-Send: be2619e6ff
-Recv: (9000) 40 ms
-Send: be261ae5ff
-Recv: (9000) 30 ms
-Send: be261be4ff
-Recv: (9000) 40 ms
-Send: be261ce3ff
-Recv: (9000) 30 ms
-Send: be261de2ff
-Recv: (9000) 40 ms
-Send: be261ee1ff
-Recv: (9000) 30 ms
-Send: be261fe0ff
-Recv: (9000) 40 ms
-Send: be2620dfff
-Recv: (9000) 30 ms
-Send: be2621deff
-Recv: (9000) 40 ms
-Send: be2622ddff
-Recv: (9000) 30 ms
-Send: be2623dcff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be2624dbff
-Recv: (9000) 31 ms
-Send: be2625daff
-Recv: (9000) 40 ms
-Send: be2626d9ff
-Recv: (9000) 30 ms
-Send: be2627d8ff
-Recv: (9000) 40 ms
-Send: be2628d7ff
-Recv: (9000) 40 ms
-Send: be2629d6ff
-Recv: (9000) 30 ms
-Send: be262ad5ff
-Recv: (9000) 40 ms
-Send: be262bd4ff
-Recv: (9000) 30 ms
-Send: be262cd3ff
-Recv: (9000) 40 ms
-Send: be262dd2ff
-Recv: (9000) 30 ms
-Send: be262ed1ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be262fd0ff
-Recv: (9000) 30 ms
-Send: be2630cfff
-Recv: (9000) 40 ms
-Send: be2631ceff
-Recv: (9000) 30 ms
-Send: be2632cdff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be2633ccff
-Recv: (9000) 30 ms
-Send: be2634cbff
-Recv: (9000) 40 ms
-Send: be2635caff
-Recv: (9000) 40 ms
-Send: be2636c9ff
-Recv: (9000) 30 ms
-Send: be2637c8ff
-Recv: (9000) 41 ms
-Send: be2638c7ff
-Recv: (9000) 30 ms
-Send: be2639c6ff
-Recv: (9000) 40 ms
-Send: be263ac5ff
-Recv: (9000) 30 ms
-Send: be263bc4ff
-Recv: (9000) 30 ms
-Send: be263cc3ff
-Recv: (9000) 40 ms
-Send: be263dc2ff
-Recv: (9000) 40 ms
-Send: be263ec1ff
-Recv: (9000) 30 ms
-Send: be263fc0ff
-Recv: (9000) 40 ms
-Send: be2640bfff
-Recv: (9000) 30 ms
-Send: be2641beff
-Recv: (9000) 30 ms
-Send: be2642bdff
-Recv: (9000) 40 ms
-Send: be2643bcff
-Recv: (9000) 30 ms
-Send: be2644bbff
-Recv: (9000) 40 ms
-Send: be2645baff
-Recv: (9000) 30 ms
-Send: be2646b9ff
-Recv: (9000) 40 ms
-Send: be2647b8ff
-Recv: (9000) 30 ms
-Send: be2648b7ff
-Recv: (9000) 40 ms
-Send: be2649b6ff
-Recv: (9000) 30 ms
-Send: be264ab5ff
-Recv: (9000) 40 ms
-Send: be264bb4ff
-Recv: (9000) 31 ms
-Send: be264cb3ff
-Recv: (9000) 40 ms
-Send: be264db2ff
-Recv: (9000) 30 ms
-Send: be264eb1ff
-Recv: (9000) 30 ms
-Send: be264fb0ff
-Recv: (9000) 40 ms
-Send: be2650afff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be2651aeff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 30 ms
-Send: be2652adff
-Recv: (9000) 30 ms
-Send: be2653acff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be2654abff
-Recv: (9000) 30 ms
-Send: be2655aaff
-Recv: (9000) 40 ms
-Send: be2656a9ff
-Recv: (9000) 40 ms
-Send: be2657a8ff
-Recv: (9000) 30 ms
-Send: be2658a7ff
-Recv: (9000) 40 ms
-Send: be2659a6ff
-Recv: (9000) 30 ms
-Send: be265aa5ff
-Recv: (9000) 40 ms
-Send: be265ba4ff
-Recv: (9000) 30 ms
-Send: be265ca3ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be265da2ff
-Recv: (9000) 30 ms
-Send: be265ea1ff
-Recv: (9000) 30 ms
-Send: be265fa0ff
-Recv: (9000) 30 ms
-Send: be26609fff
-Recv: (9000) 30 ms
-Send: be26619eff
-Recv: (9000) 30 ms
-Send: be26629dff
-Recv: (9000) 30 ms
-Send: be26639cff
-Recv: (9000) 30 ms
-Send: be26649bff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 40 ms
-Send: be26659aff
-Recv: (9000) 30 ms
-Send: be266699ff
-Recv: (9000) 40 ms
-Send: be266798ff
-Recv: (9000) 30 ms
-Send: be266897ff
-Recv: (9000) 40 ms
-Send: be266996ff
-Recv: (9000) 30 ms
-Send: be266a95ff
-Recv: (9000) 40 ms
-Send: be266b94ff
-Recv: (9000) 30 ms
-Send: be266c93ff
-Recv: (9000) 40 ms
-Send: be266d92ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-Recv: (9000) 30 ms
-Send: be266e91ff
-Recv: (9000) 40 ms
-Send: be266f90ff
-Recv: (9000) 30 ms
-Send: be26708fff
-Recv: (9000) 30 ms
-Send: be26718eff
-Recv: (9000) 40 ms
-Send: be26728dff
-Recv: (9000) 30 ms
-Send: be26738cff
-Recv: (9000) 41 ms
-Send: be26748bff
-Recv: (9000) 30 ms
-Send: be26758aff
-Recv: (9000) 40 ms
-Send: be267689ff
-Recv: (9000) 30 ms
-Send: be267788ff
-Recv: (9000) 30 ms
-Send: be267887ff
-Recv: (9000) 40 ms
-Send: be267986ff
-Recv: (9000) 30 ms
-Send: be267a85ff
-Recv: (9000) 40 ms
-Send: be267b84ff
-Recv: (9000) 30 ms
-Send: be267c831600000000000000000000000000000000000000000000
-Recv: (9000) 10 ms
-Send: be160000ff0136430100000000006b75026b026b0048008000000103000000000000000000000000000000000000000000000000000000000000000000000212000005ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000100000000000000000109f849524d4163617264ffffffffffffff0000000000000000002bb77c99021000170018004e4e0007140832702cfb916c5c2a5558ff8dbd4eae777ee638010352ca04f751b34d81d615db18e326346d03469bca34dd7e1494bddeb6e4dc06fc8efad34fec35bb4fa446120ae25b9f9684813672ac5b9166fd439bbe5b5925e5c2b36117fdc82a
-Recv: (9000) 40 ms
-Send: be16000037127bd5176b513d34e0c1dae2fb5ed9c52e756ff8f9850bfaae935220ad6b620fae57d94e6170d09bf6e3f8a296a6b728c805322ad377e2
-Recv: (9000) 461 ms
diff -uNr irma_card/include/APDU.h integration/include/APDU.h
--- irma_card/include/APDU.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/APDU.h	2014-09-03 15:01:09.061949575 +0200
@@ -74,6 +74,46 @@
 #define INS_ADMIN_LOG              0x3B
 
 /*
+ * Issuer PK
+ */
+
+#define INS_SET_BASE	0x4A
+#define INS_SET_IPK	0X4B 
+#define INS_SET_ATTR	0x4C
+#define INS_SET_SIG	0x4D
+
+#define INS_GET_BASE	0x5A
+#define INS_GET_IPK	0x5B
+#define INS_GET_ATTR	0x5C
+#define INS_GET_SIG	0x5D
+
+// RANDOMIZED SIGNATURE
+
+#define INS_GET_RANDOM_A	0x5E
+#define INS_GET_RANDOM_V	0x5F
+
+// PSEUDONYM
+
+#define INS_GET_NYM	0x50
+
+// T-COMMITMENT
+
+#define INS_GET_COM	0x51
+
+// S-VALUE 1, 2
+
+#define INS_GET_S_1	0x52
+#define INS_GET_S_2	0x53
+
+// PK COMMITMENT
+
+#define INS_GET_PK	0x54
+
+// GENERATE PSEUDORANDOMNESS
+
+#define INS_GEN_RANDOM	0x55
+
+/*
  * Parameter bytes
  */
 #define P1_AUTH_EXPONENT    0x00
diff -uNr irma_card/include/math.h integration/include/math.h
--- irma_card/include/math.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/math.h	2014-09-03 15:01:09.061949575 +0200
@@ -52,6 +52,10 @@
   __code(PRIM, PRIM_MODULAR_MULTIPLICATION); \
 } while (0)
 
+#ifdef SIMULATOR
+#undef RSA_VERIFY
+#endif
+
 #ifdef RSA_VERIFY
 
 #define ModExp(ExponentLength, ModulusLength, Exponent, Modulus, Base, Result) \
diff -uNr irma_card/include/sizes.h integration/include/sizes.h
--- irma_card/include/sizes.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/sizes.h	2014-09-03 15:01:09.061949575 +0200
@@ -23,9 +23,21 @@
 #ifndef __sizes_H
 #define __sizes_H
 
+// Size of ABC4Trust secrets
+
+#define SIZE_SECRET_ABC	10
+
+// Size of RA for compatibility with
+// ABC4Trust
+
+#define SIZE_R_A_ABC	124
+
+// Size of ABC4Trust randomizer
+#define SIZE_RAND	52
+
 // Attribute and credential definitions
 #define MAX_ATTR      5
-#define MAX_CRED      15
+#define MAX_CRED      2
 
 // System parameter lengths
 #define LENGTH_N      1024
diff -uNr irma_card/include/SM.config.h integration/include/SM.config.h
--- irma_card/include/SM.config.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/SM.config.h	2014-09-03 15:01:09.061949575 +0200
@@ -32,8 +32,8 @@
  * Define either SM_AES or SM_DES to use defaults, otherwise specify the
  * custom configuration in the first block
  */
-//#define SM_AES
-#define SM_DES
+#define SM_AES
+//#define SM_DES
 
 #ifndef SM_AES
 #ifndef SM_DES
@@ -80,4 +80,3 @@
 #endif // !SM_AES
 
 #endif // __SM_config_H
-
diff -uNr irma_card/include/types.h integration/include/types.h
--- irma_card/include/types.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/types.h	2014-09-03 15:01:09.061949575 +0200
@@ -53,6 +53,8 @@
 typedef Value *ValueArray;
 
 typedef struct {
+  Number T;
+  Number D;
   Number n;
   Number Z;
   Number S;
diff -uNr irma_card/include/utils.h integration/include/utils.h
--- irma_card/include/utils.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/utils.h	2014-09-03 15:01:09.061949575 +0200
@@ -75,4 +75,26 @@
  */
 //void ClearSession(void);
 
+#define multosBlockMultiply(blockLength, block1, block2, result) \
+do { \
+    __push (BLOCKCAST(blockLength)(__typechk(unsigned char *, block1))); \
+    __push (BLOCKCAST(blockLength)(__typechk(unsigned char *, block2))); \
+    __code (PRIM, PRIM_MULTIPLYN, blockLength); \
+    __code (STORE, __typechk(unsigned char *, result), blockLength*2); \
+} while (0)
+
+#define __BINARY_OPN(N, OP, RES, OP1, OP2) \
+do {  \
+    __push (BLOCKCAST(N)(__typechk(unsigned char *, OP1))); \
+    __push (BLOCKCAST(N)(__typechk(unsigned char *, OP2))); \
+    __code (OP, N);  \
+    __code (POPN, N);  \
+    __code (STORE, __typechk(unsigned char *, RES), N); \
+} while (0)
+
+#define multosBlockSubtract(blockLength, block1, block2, result) \
+    __BINARY_OPN (blockLength, SUBN, result, block1, block2)
+
+#define PRIM_MULTIPLYN                            0x10
+
 #endif // __utils_H
diff -uNr irma_card/include/verification.h integration/include/verification.h
--- irma_card/include/verification.h	2014-09-03 14:58:34.847038740 +0200
+++ integration/include/verification.h	2014-09-03 15:01:09.061949575 +0200
@@ -18,6 +18,9 @@
  *
  * Copyright (C) July 2011 - 2013.
  *   Pim Vullers <pim@cs.ru.nl>, Radboud University Nijmegen.
+ * Copyright (C) July 2014.
+ *   Antonio de la Piedra <a.delapiedra@cs.ru.nl>, Radboud University Nijmegen.
+ *	- Integration with ABC4Trust
  */
 
 #ifndef __verification_H
@@ -26,6 +29,10 @@
 #include "MULTOS.h"
 #include "types.h"
 
+unsigned int realSize(unsigned char *buffer, unsigned int size);
+
+void randomizeSignature(Credential *credential);
+
 /**
  * Select the attributes to be disclosed.
  */
@@ -165,7 +172,7 @@
   __code(POPN, SIZE_M_); \
   __code(STOREI, SIZE_M_); \
 } while (0)
-
+        
 /**
  * Determine whether an attribute is to be disclosed or not.
  *
@@ -174,4 +181,119 @@
  */
 #define disclosed(index) ((session.prove.disclose >> (index)) & 0x0001)
 
+#define crypto_compute_vPrimeABC4trust() \
+do { \
+  /* Clear the buffer, to prevent garbage messing up the computation */\
+  __code(CLEARN, public.prove.buffer.data, SIZE_V - 2*SIZE_E); \
+  /* Multiply e with least significant half of r_A */\
+  __code(PUSHZ, SIZE_E - 124/2); \
+  __push(BLOCKCAST(124/2)(public.prove.rA + 124/2)); \
+  __push(BLOCKCAST(SIZE_E)(credential->signature.e)); \
+  __code(PRIM, PRIM_MULTIPLY, SIZE_E); \
+  __code(STORE, public.prove.buffer.data + SIZE_V - 2*SIZE_E, 2*SIZE_E); \
+  /* Multiply e with most significant half of r_A */\
+  __code(PUSHZ, SIZE_E - 124/2); \
+  __push(BLOCKCAST(124/2)(public.prove.rA)); \
+  __push(BLOCKCAST(SIZE_E)(credential->signature.e)); \
+  __code(PRIM, PRIM_MULTIPLY, SIZE_E); \
+  /* Combine the two multiplications into a single result */\
+  __code(ADDN, public.prove.buffer.data, SIZE_V - 124/2); \
+  __code(POPN, 2*SIZE_E); \
+  /* Subtract from v and store the result in v' */\
+  __push(BLOCKCAST(SIZE_V/2 + 1)(credential->signature.v + SIZE_V/2)); \
+  __push(BLOCKCAST(SIZE_V/2 + 1)(public.prove.buffer.data + SIZE_V/2)); \
+  __code(SUBN, SIZE_V/2 + 1); \
+  IfCarry( \
+    debugMessage("Subtraction with borrow, adding 1"); \
+    __code(INCN, public.prove.buffer.data, SIZE_V/2); \
+  ); \
+  __code(POPN, SIZE_V/2 + 1); \
+  __code(STORE, public.prove.buffer.data + SIZE_V/2, SIZE_V/2 + 1); \
+  __push(BLOCKCAST(SIZE_V/2)(credential->signature.v)); \
+  __push(BLOCKCAST(SIZE_V/2)(public.prove.buffer.data)); \
+  __code(SUBN, SIZE_V/2); \
+  __code(POPN, SIZE_V/2); \
+  __code(STORE, public.prove.buffer.data, SIZE_V/2); \
+} while (0)
+/* Simple subtraction does not fit on the stack.
+  __push(BLOCKCAST(SIZE_V)(credential->signature.v)); \
+  __push(BLOCKCAST(SIZE_V)(public.prove.buffer.data)); \
+  __code(SUBN, SIZE_V); \
+  __code(POPN, SIZE_V); \
+  __code(STORE, public.prove.buffer.data, SIZE_V); \
+} while (0) */
+
+#define gen_s_value_2() \
+do { \
+  /* Clear the buffer, to prevent garbage messing up the computation */\
+  __code(CLEARN, public.prove.buffer.data, SIZE_RAND - 2*SIZE_H); \
+  /* Multiply e with least significant half of r_A */\
+  __code(PUSHZ, SIZE_H - 10/2); \
+  __push(BLOCKCAST(10/2)(secret + 10/2)); \
+  __push(BLOCKCAST(SIZE_H)(m_challenge)); \
+  __code(PRIM, PRIM_MULTIPLY, SIZE_H); \
+  __code(STORE, public.prove.buffer.data + SIZE_RAND - 2*SIZE_H, 2*SIZE_H); \
+  /* Multiply e with most significant half of r_A */\
+  __code(PUSHZ, SIZE_H - 10/2); \
+  __push(BLOCKCAST(10/2)(secret)); \
+  __push(BLOCKCAST(SIZE_H)(m_challenge)); \
+  __code(PRIM, PRIM_MULTIPLY, SIZE_H); \
+  /* Combine the two multiplications into a single result */\
+  __code(ADDN, public.prove.buffer.data, SIZE_RAND - 10/2); \
+  __code(POPN, 2*SIZE_H); \
+  /* Subtract from v and store the result in v' */\
+  __push(BLOCKCAST(SIZE_RAND/2 + 1)(xr2 + SIZE_RAND/2)); \
+  __push(BLOCKCAST(SIZE_RAND/2 + 1)(public.prove.buffer.data + SIZE_RAND/2)); \
+  __code(SUBN, SIZE_RAND/2 + 1); \
+  IfCarry( \
+    debugMessage("Subtraction with borrow, adding 1"); \
+    __code(INCN, public.prove.buffer.data, SIZE_RAND/2); \
+  ); \
+  __code(POPN, SIZE_RAND/2 + 1); \
+  __code(STORE, public.prove.buffer.data + SIZE_RAND/2, SIZE_RAND/2 + 1); \
+  __push(BLOCKCAST(SIZE_RAND/2)(xr2)); \
+  __push(BLOCKCAST(SIZE_RAND/2)(public.prove.buffer.data)); \
+  __code(SUBN, SIZE_RAND/2); \
+  __code(POPN, SIZE_RAND/2); \
+  __code(STORE, public.prove.buffer.data, SIZE_RAND/2); \
+} while (0)
+
+#define gen_s_value_1() \
+do { \
+  /* Clear the buffer, to prevent garbage messing up the computation */\
+  __code(CLEARN, public.prove.buffer.data, SIZE_RAND - 2*SIZE_H); \
+  /* Multiply e with least significant half of r_A */\
+  __code(PUSHZ, SIZE_H - 10/2); \
+  __push(BLOCKCAST(10/2)(secret2 + 10/2)); \
+  __push(BLOCKCAST(SIZE_H)(m_challenge)); \
+  __code(PRIM, PRIM_MULTIPLY, SIZE_H); \
+  __code(STORE, public.prove.buffer.data + SIZE_RAND - 2*SIZE_H, 2*SIZE_H); \
+  /* Multiply e with most significant half of r_A */\
+  __code(PUSHZ, SIZE_H - 10/2); \
+  __push(BLOCKCAST(10/2)(secret2)); \
+  __push(BLOCKCAST(SIZE_H)(m_challenge)); \
+  __code(PRIM, PRIM_MULTIPLY, SIZE_H); \
+  /* Combine the two multiplications into a single result */\
+  __code(ADDN, public.prove.buffer.data, SIZE_RAND - 10/2); \
+  __code(POPN, 2*SIZE_H); \
+  /* Subtract from v and store the result in v' */\
+  __push(BLOCKCAST(SIZE_RAND/2 + 1)(xr1 + SIZE_RAND/2)); \
+  __push(BLOCKCAST(SIZE_RAND/2 + 1)(public.prove.buffer.data + SIZE_RAND/2)); \
+  __code(SUBN, SIZE_RAND/2 + 1); \
+  IfCarry( \
+    debugMessage("Subtraction with borrow, adding 1"); \
+    __code(INCN, public.prove.buffer.data, SIZE_RAND/2); \
+  ); \
+  __code(POPN, SIZE_RAND/2 + 1); \
+  __code(STORE, public.prove.buffer.data + SIZE_RAND/2, SIZE_RAND/2 + 1); \
+  __push(BLOCKCAST(SIZE_RAND/2)(xr1)); \
+  __push(BLOCKCAST(SIZE_RAND/2)(public.prove.buffer.data)); \
+  __code(SUBN, SIZE_RAND/2); \
+  __code(POPN, SIZE_RAND/2); \
+  __code(STORE, public.prove.buffer.data, SIZE_RAND/2); \
+} while (0)
+
+
 #endif // __verification_H
+
+
diff -uNr irma_card/README.md integration/README.md
--- irma_card/README.md	2014-09-03 14:58:34.843038667 +0200
+++ integration/README.md	2014-09-03 15:01:09.061949575 +0200
@@ -1,55 +1,6 @@
-IRMA card
-=========
+# IRMA card
 
-This is the smart card application used by the I Reveal Your Attributes (IRMA) project to issue,
-reveal and manage attributes [1]. 
-
-#### 1. Obtaining cards
-
-IRMA rely on MULTOS cards. Developers and users can order developer cards through MULTOS
-international http://www.multosinternational.com/contact-us.aspx.
-
-#### 2. Compiling the source code of IRMA
-
-It is possible to load the last IRMA image into the card without compiling the
-source code (Step 3). However, we describe how to compile the source code in this
-section. The MULTOS SDK, Smartdeck, is only available for Windows. It can be downloaded from
-https://app.multos.com/smartdeck.html.
-
-All the toolset for compiling, examining cards and loading applications should be included in the
-user PATH. Afterwards, clone the IRMA source code and compile the smart card application from the
-command line. This can be done using [cygwin](http://www.cygwin.com/) and make:
-
-```
-$ git clone https://github.com/credentials/irma_card
-$ cd irma_card/
-$ make
-```
-
-From the output of the linker we can get the RAM space we need to
-include in the MULTOS loader (528 bytes in this case):
-
-```
-mkdir -p bin
-hcl -ansi -O -Iinclude -DML3 -DRSA_VERIFY -DSIMULATOR -g src/IRMAcard.c src/verification.c src/RSA.c src/random.c src/AES.c src/debug.c src/math.c src/utils.c src/auth.c src/SM.c src/issuance.c src/CHV.c src/logging.c src/ASN1.c -o bin/IRMAcard.simulator-ML3.hzx
-hcl -ansi -O -Iinclude -DML3 -DRSA_VERIFY -Falu src/IRMAcard.c src/verification.c src/RSA.c src/random.c src/AES.c src/debug.c src/math.c src/utils.c src/auth.c src/SM.c src/issuance.c src/CHV.c src/logging.c src/ASN1.c -o bin/IRMAcard.smartcard-ML3.alu
-code: 11434, static: 31889, session: 528
-```
-#### 3. Loading IRMA in a MULTOS developer card
-
-In MULTOS, the smart card applications are loaded using the MUtil tool. It can be downloaded
-from http://www.multos.com/uploads/MUtil.zip.
-
-In order to load an application in the card we must first copy the AID into MUtil. In the case
-of IRMA this is specified in the .aif file of the card/ directory for the last available version.
-Moreover, we must include the RAM space that will be reserved for session data in the application (Section 2).
-
-#### 4. Using your IRMA card
-
-The first you thing you can do is to change your credential and administration PINs using
-[silvia](https://github.com/credentials/silvia). Then, you can generate an issuer keypair and
-start issuing and verifying credentials using the examples from https://github.com/credentials/irma_configuration or create your own credentials.
-
-#### 5. References
+This is the smart card application used by the IRMA project [1] to issue,
+reveal and manage attributes.
 
 [1] http://www.irmacard.org/
diff -uNr irma_card/src/IRMAcard.c integration/src/IRMAcard.c
--- irma_card/src/IRMAcard.c	2014-09-03 14:58:34.847038740 +0200
+++ integration/src/IRMAcard.c	2014-09-03 15:01:09.061949575 +0200
@@ -18,6 +18,9 @@
  *
  * Copyright (C) July 2011 - 2013.
  *   Pim Vullers <pim@cs.ru.nl>, Radboud University Nijmegen.
+ * Copyright (C) July 2014.
+ *   Antonio de la Piedra <a.delapiedra@cs.ru.nl>, Radboud University Nijmegen.
+ *    	- Modifications for the integration in the ABC4Trust architecture.
  */
 
 /**
@@ -160,6 +163,31 @@
 Log log;
 IRMALogEntry *logEntry;
 
+// ABC4Trust
+unsigned char m_challenge[SIZE_H]; /* We store here the centralized challenge received 
+                                      by the ABC4trust user-side */
+
+/* We store here the credential and device secrets */
+unsigned char secret[SIZE_SECRET_ABC] =  {0xc6,0x56,0x6b,0x48,0x35,0x3f,0x85,0x0d,0xa0,0xd4}; 
+unsigned char secret2[SIZE_SECRET_ABC] = {0x0e,0xe7,0xca,0x46,0x96,0xb2,0xad,0x6f,0xe2,0xb2};
+
+/* We store here the pseudorandomness associated to the commitments performed by
+ABC4Trust */
+unsigned char xr1[SIZE_RAND];
+unsigned char xr2[SIZE_RAND];
+
+/* Limited scope pseudonym parameters */
+
+unsigned char r_base_nym[SIZE_N]; /* This is the base utilized for computing
+the pseudonym related commitment */
+
+unsigned char r_dhgen_1[SIZE_N]; /* This is the generator utiilzed in the
+public key commitments */
+
+unsigned char r_mod_nym[SIZE_N]; /* This is the modulus utilized for
+computing the pseudonym related commitment */
+
+
 /********************************************************************/
 /* APDU handling                                                    */
 /********************************************************************/
@@ -170,6 +198,8 @@
 void processIssuance(void);
 void processVerification(void);
 void processAdministration(void);
+void processABC4Trust(void);
+void loadABC4Trust(void);
 
 void main(void) {
   // Check whether the APDU has been wrapped for secure messaging
@@ -245,17 +275,11 @@
         //////////////////////////////////////////////////////////////
 
         case INS_VERIFY:
-          if (!CheckCase(3)) {
-            APDU_returnSW(SW_WRONG_LENGTH);
-          }
 	        debugMessage("Processing PIN verification...");
           processPINVerify();
           SM_return();
 
         case INS_CHANGE_REFERENCE_DATA:
-          if (!CheckCase(3)) {
-            APDU_returnSW(SW_WRONG_LENGTH);
-          }
           debugMessage("Processing PIN change...");
           processPINChange();
           return;
@@ -290,6 +314,17 @@
           processVerification();
           SM_return();
 
+          // setter
+        case 0x40:
+          loadABC4Trust();
+          return;
+
+          // getter
+        case 0x50:
+          debugMessage("Processing administration instruction...");
+          processABC4Trust();
+          return;
+
         case 0x30:
           debugMessage("Processing administration instruction...");
           processAdministration();
@@ -457,11 +492,6 @@
 
   APDU_checkP1P2(0x0000);
 
-  if (!(APDU_wrapped || CheckCase(3))) {
-    APDU_ReturnSW(SW_WRONG_LENGTH);
-  }
-  APDU_checkLength(sizeof(IssuanceSetup));
-
   // Ensure that the master secret is initiaised
   IfZeroBytes(SIZE_M, masterSecret, RandomBits(masterSecret, LENGTH_M));
 
@@ -530,6 +560,7 @@
   // Special case: start issuance
   if (INS == INS_ISSUE_CREDENTIAL) {
     debugMessage("INS_ISSUE_CREDENTIAL");
+    APDU_checkLength(sizeof(IssuanceSetup));
 
     startIssuance();
 
@@ -548,9 +579,6 @@
           nextState();
         }
         checkState(STATE_ISSUE_PUBLIC_KEY);
-        if (!(APDU_wrapped || CheckCase(3))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(SIZE_N);
 
         switch (P1) {
@@ -594,9 +622,6 @@
           nextState();
         }
         checkState(STATE_ISSUE_ATTRIBUTES);
-        if (!(APDU_wrapped || CheckCase(3))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(SIZE_M);
         APDU_checkP1range(1, credential->size);
         IfZero(SIZE_M, public.apdu.data,
@@ -613,9 +638,6 @@
         if (!matchState(STATE_ISSUE_ATTRIBUTES) && !issuance_checkAttributes(credential)) {
           APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
         }
-        if (!(APDU_wrapped || CheckCase(3))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(SIZE_STATZK);
 
         Copy(SIZE_STATZK, public.issue.nonce, public.apdu.data);
@@ -629,9 +651,6 @@
       case INS_ISSUE_COMMITMENT_PROOF:
         debugMessage("INS_ISSUE_COMMITMENT_PROOF");
         checkState(STATE_ISSUE_COMMITTED);
-        if (!(APDU_wrapped || CheckCase(1))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(0);
 
         switch (P1) {
@@ -662,9 +681,6 @@
       case INS_ISSUE_CHALLENGE:
         debugMessage("INS_ISSUE_CHALLENGE");
         checkState(STATE_ISSUE_COMMITTED);
-        if (!(APDU_wrapped || CheckCase(1))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(0);
 
         Copy(SIZE_STATZK, public.apdu.data, credential->proof.nonce);
@@ -679,9 +695,6 @@
           nextState();
         }
         checkState(STATE_ISSUE_SIGNATURE);
-        if (!(APDU_wrapped || CheckCase(3))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
 
         switch(P1) {
           case P1_SIGNATURE_A:
@@ -730,9 +743,6 @@
           nextState();
         }
         checkState(STATE_ISSUE_VERIFY);
-        if (!(APDU_wrapped || CheckCase(1))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
 
         if (!verifySignature(credential, &masterSecret[0], &session.vfySig)) {
           debugWarning("Signature invalid");
@@ -759,11 +769,6 @@
 
   APDU_checkP1P2(0x0000);
 
-  if (!(APDU_wrapped || CheckCase(3))) {
-    APDU_ReturnSW(SW_WRONG_LENGTH);
-  }
-  APDU_checkLength(sizeof(VerificationSetup));
-
   // Start a new verification session
   credential = NULL;
   ClearBytes(sizeof(VerificationSession), &(session.prove));
@@ -822,6 +827,7 @@
   // Special case: start verification
   if (INS == INS_PROVE_CREDENTIAL) {
     debugMessage("INS_PROVE_CREDENTIAL");
+    APDU_checkLength(sizeof(VerificationSetup));
 
     startVerification();
 
@@ -837,9 +843,6 @@
       case INS_PROVE_COMMITMENT:
         debugMessage("INS_PROVE_COMMITMENT");
         checkState(STATE_PROVE_SETUP);
-        if (!(APDU_wrapped || CheckCase(3))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(SIZE_STATZK);
 
         constructProof(credential, &masterSecret[0]);
@@ -854,26 +857,34 @@
           nextState();
         }
         checkState(STATE_PROVE_SIGNATURE);
-        if (!(APDU_wrapped || CheckCase(1))) {
-          APDU_returnSW(SW_WRONG_LENGTH);
-        }
-        APDU_checkLength(0);
 
         switch(P1) {
           case P1_SIGNATURE_A:
             debugMessage("P1_SIGNATURE_A");
+            if (!(APDU_wrapped || CheckCase(1))) {
+              APDU_returnSW(SW_WRONG_LENGTH);
+            }
+
             Copy(SIZE_N, public.apdu.data, public.prove.APrime);
             debugNumber("Returned A'", public.apdu.data);
             APDU_returnLa(SIZE_N);
 
           case P1_SIGNATURE_E:
             debugMessage("P1_SIGNATURE_E");
+            if (!(APDU_wrapped || CheckCase(1))) {
+              APDU_returnSW(SW_WRONG_LENGTH);
+            }
+
             Copy(SIZE_E_, public.apdu.data, public.prove.eHat);
             debugValue("Returned e^", public.apdu.data, SIZE_E_);
             APDU_returnLa(SIZE_E_);
 
           case P1_SIGNATURE_V:
             debugMessage("P1_SIGNATURE_V");
+            if (!(APDU_wrapped || CheckCase(1))) {
+              APDU_returnSW(SW_WRONG_LENGTH);
+            }
+
             Copy(SIZE_V_, public.apdu.data, public.prove.vHat);
             debugValue("Returned v^", public.apdu.data, SIZE_V_);
             APDU_returnLa(SIZE_V_);
@@ -889,9 +900,6 @@
           nextState();
         }
         checkState(STATE_PROVE_ATTRIBUTES);
-        if (!(APDU_wrapped || CheckCase(1))) {
-          APDU_ReturnSW(SW_WRONG_LENGTH);
-        }
         APDU_checkLength(0);
         if (P1 > credential->size) {
           APDU_returnSW(SW_WRONG_P1P2);
@@ -938,9 +946,6 @@
       debugMessage("INS_ADMIN_CREDENTIAL");
 
       APDU_checkP1P2(0x0000);
-      if (!CheckCase(3)) {
-        APDU_ReturnSW(SW_WRONG_LENGTH);
-      }
       APDU_checkLength(sizeof(AdminSelect));
 
       // Lookup the given credential ID and select it if it exists
@@ -958,16 +963,10 @@
         APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
       }
 
-      if (P1 == 0) {
+      if (P1 == 0 || P1 > credential->size) {
         APDU_returnSW(SW_WRONG_P1P2);
       }
-      else if(P1 > credential->size) {
-        APDU_returnSW(SW_RECORD_NOT_FOUND);
-      }
       APDU_checkP2(0x00);
-      if (!CheckCase(1)) {
-        APDU_ReturnSW(SW_WRONG_LENGTH);
-      }
       APDU_checkLength(0);
 
       Copy(SIZE_M, public.apdu.data, credential->attribute[P1 - 1]);
@@ -981,21 +980,18 @@
       }
 
       APDU_checkP1P2(0x0000);
-      if (!CheckCase(3)) {
-        APDU_ReturnSW(SW_WRONG_LENGTH);
-      }
       APDU_checkLength(sizeof(AdminRemove));
 
+      debugInteger("Removing credential", credential->id);
+      ClearCredential(credential);
+      debugMessage("Removed credential");
+
       // Create new log entry
       logEntry = (IRMALogEntry*) log_new_entry(&log);
       Copy(SIZE_TIMESTAMP, logEntry->timestamp, public.adminRemove.timestamp);
       Copy(AUTH_TERMINAL_ID_BYTES, logEntry->terminal, terminal.id);
       logEntry->action = ACTION_REMOVE;
-      logEntry->credential = credential->id;
-
-      debugInteger("Removing credential", credential->id);
-      ClearCredential(credential);
-      debugMessage("Removed credential");
+      logEntry->credential = P1P2;
 
       APDU_return();
 
@@ -1006,9 +1002,6 @@
       }
 
       APDU_checkP1P2(0x0000);
-      if (!CheckCase(3)) {
-        APDU_ReturnSW(SW_WRONG_LENGTH);
-      }
       APDU_checkLength(sizeof(CredentialFlags));
 
       if (Lc > 0) {
@@ -1026,9 +1019,6 @@
       debugMessage("INS_ADMIN_LOG");
 
       APDU_checkP2(0x00);
-      if (!CheckCase(1)) {
-        APDU_ReturnSW(SW_WRONG_LENGTH);
-      }
       APDU_checkLength(0);
 
       for (i = 0; i < 255 / sizeof(LogEntry); i++) {
@@ -1052,3 +1042,331 @@
       break;
   }
 }
+
+/**
+*
+* This methods perform the randomization of the (A, e, v) triple
+* and the generation of the t- and s-values in the key binding case
+* of ABC4Trust. Given that the generation of the challenge is centralized
+* it is expected when generating the first and second s-value.	
+*
+* In this case, we only rely on one credential and support domain
+* pseudonyms together with public key commitments.
+*
+*/
+
+void processABC4Trust(void) {
+  unsigned char i;
+  unsigned int rA_size;
+  unsigned int rA_offset;
+
+  switch (INS) {
+    
+    case INS_GET_S_1:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_H);
+
+      credential = &credentials[0];
+
+      Copy(SIZE_H, m_challenge, public.apdu.data);
+      
+      gen_s_value_1();
+
+      Copy(SIZE_RAND, public.apdu.data, public.prove.buffer.data);
+      APDU_returnLa(SIZE_RAND);
+      break;
+      
+    case INS_GET_S_2:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_H);
+
+      credential = &credentials[0];
+
+      Copy(SIZE_H, m_challenge, public.apdu.data);
+      
+      gen_s_value_2();
+
+      Copy(SIZE_RAND, public.apdu.data, public.prove.buffer.data);
+      APDU_returnLa(SIZE_RAND);
+      break;
+      
+    case INS_GET_COM:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+
+      ModExp(SIZE_RAND, SIZE_N, xr1, credential->issuerKey.n, credential->issuerKey.D, public.prove.buffer.number[0]);
+      ModExp(SIZE_RAND, SIZE_N, xr2, credential->issuerKey.n, credential->issuerKey.S, public.prove.buffer.number[1]);
+
+      ModMul(SIZE_N, public.prove.buffer.number[0], public.prove.buffer.number[1], credential->issuerKey.n);
+
+      Copy(SIZE_N, public.apdu.data, public.prove.buffer.number[0]);
+      APDU_returnLa(SIZE_N);
+      break;
+
+    case INS_GET_NYM:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      ModExp(SIZE_RAND, SIZE_N, xr1, r_mod_nym, r_base_nym, public.apdu.data); 
+
+      APDU_returnLa(SIZE_N);
+      break;
+
+    case INS_GET_PK:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      ModExp(SIZE_RAND, SIZE_N, xr1, r_mod_nym, r_dhgen_1, public.apdu.data); 
+      APDU_returnLa(SIZE_N);
+ 
+      break;
+ 
+    case INS_GET_RANDOM_A:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+
+      RandomBits(public.prove.rA, SIZE_R_A_ABC*8);
+
+      ModExpSpecial(credential, SIZE_R_A_ABC, public.prove.rA, public.prove.APrime, public.prove.buffer.number[0]);
+      ModMul(SIZE_N, public.prove.APrime, credential->signature.A, credential->issuerKey.n);
+
+      Copy(SIZE_N, public.apdu.data, public.prove.APrime);
+      APDU_returnLa(SIZE_N);
+ 
+      break;
+
+    case INS_GEN_RANDOM:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      /* We set xr1 and xr2 here */
+      
+      RandomBits(xr1, SIZE_RAND);
+      RandomBits(xr2, SIZE_RAND);
+
+      APDU_returnSW(SW_NO_ERROR);
+ 
+      break;
+
+    case INS_GET_RANDOM_V:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      // Compute v' = v - e*r_A
+      crypto_compute_vPrimeABC4trust(); 
+  
+      Copy(SIZE_V, public.apdu.data, public.prove.buffer.data);
+      APDU_returnLa(SIZE_V);
+
+      break;
+            
+    case INS_GET_BASE:
+
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+
+      Copy(SIZE_N, public.apdu.data, credential->issuerKey.R[P1]);
+      APDU_returnLa(SIZE_N);
+      break;
+
+    case INS_GET_IPK:      
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* T */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.T);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x01: /* D */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.D);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x02: /* M */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.n);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x03: /* Z */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.Z);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x04: /* S */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.S);
+        APDU_returnLa(SIZE_N);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      APDU_returnLa(SIZE_N);
+      break;
+
+     case INS_GET_ATTR:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      Copy(SIZE_N, public.apdu.data, credential->attribute[P1 + 1]);
+      APDU_returnLa(SIZE_M);
+      break;
+
+    case INS_GET_SIG:
+      APDU_checkP2(0x00);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* A */
+        Copy(SIZE_N, public.apdu.data, credential->signature.A);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x01: /* e */
+        Copy(SIZE_E, public.apdu.data, credential->signature.e);
+        APDU_returnLa(SIZE_E);
+        break;
+       case 0x02: /* v */
+        Copy(SIZE_V, public.apdu.data, credential->signature.v);
+        APDU_returnLa(SIZE_V);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      
+      break;
+
+    default:
+      debugWarning("Unknown instruction");
+      debugInteger("CLA", CLA);
+      debugInteger("INS", INS);
+      debugInteger("P1", P1);
+      debugInteger("P2", P2);
+      debugInteger("Lc", Lc);
+      debugValue("data", public.apdu.data, Lc);
+      APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+      break;
+  }
+}
+
+/*
+*
+* This method groups all the instructions related
+* to the loading process of the ABC4Trust parameters.
+*
+*/
+
+void loadABC4Trust(void) {
+  unsigned char i;
+
+  switch (INS) {
+    case INS_SET_BASE:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_N);
+
+      credential = &credentials[0];
+      
+      Copy(SIZE_N, credential->issuerKey.R[P1], public.apdu.data);
+      break;
+
+    case INS_SET_IPK:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_N);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* T */
+        Copy(SIZE_N, credential->issuerKey.T, public.apdu.data);
+        break;
+       case 0x01: /* D */
+        Copy(SIZE_N, credential->issuerKey.D, public.apdu.data);
+        break;
+       case 0x02: /* M */
+        Copy(SIZE_N, credential->issuerKey.n, public.apdu.data);
+        break;
+       case 0x03: /* Z */
+        Copy(SIZE_N, credential->issuerKey.Z, public.apdu.data);
+        break;
+       case 0x04: /* S */
+        Copy(SIZE_N, credential->issuerKey.S, public.apdu.data);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      
+      break;
+
+    case INS_SET_ATTR:
+      APDU_checkP2(0x00);
+
+      if (P1 == 0) {
+       APDU_checkLength(SIZE_N);
+       Copy(SIZE_N, r_base_nym, public.apdu.data);
+      } else if (P1 == 1) {
+       APDU_checkLength(SIZE_N);
+       Copy(SIZE_N, r_dhgen_1, public.apdu.data);
+      } else {
+       APDU_checkLength(SIZE_N);
+       Copy(SIZE_N, r_mod_nym, public.apdu.data);      
+      }
+      
+      break;
+
+    case INS_SET_SIG:
+      APDU_checkP2(0x00);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* A */
+        APDU_checkLength(SIZE_N);
+        Copy(SIZE_N, credential->signature.A, public.apdu.data);
+        break;
+       case 0x01: /* e */
+        APDU_checkLength(SIZE_E);
+        Copy(SIZE_E, credential->signature.e, public.apdu.data);
+        break;
+       case 0x02: /* v */
+        APDU_checkLength(SIZE_V);
+        Copy(SIZE_V, credential->signature.v, public.apdu.data);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      
+      break;
+    
+    default:
+      debugWarning("Unknown instruction");
+      debugInteger("CLA", CLA);
+      debugInteger("INS", INS);
+      debugInteger("P1", P1);
+      debugInteger("P2", P2);
+      debugInteger("Lc", Lc);
+      debugValue("data", public.apdu.data, Lc);
+      APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+      break;
+}
+}
+
diff -uNr irma_card/src/IRMAcard.c~ integration/src/IRMAcard.c~
--- irma_card/src/IRMAcard.c~	1970-01-01 01:00:00.000000000 +0100
+++ integration/src/IRMAcard.c~	2014-09-03 15:01:09.061949575 +0200
@@ -0,0 +1,1385 @@
+/**
+ * IRMAcard.c
+ *
+ * This file is part of IRMAcard.
+ *
+ * IRMAcard is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * IRMAcard is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with IRMAcard. If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Copyright (C) July 2011 - 2013.
+ *   Pim Vullers <pim@cs.ru.nl>, Radboud University Nijmegen.
+ * Copyright (C) July 2014.
+ *   Antonio de la Piedra <a.delapiedra@cs.ru.nl>, Radboud University Nijmegen.
+ *    	- Modifications for the integration in the ABC4Trust architecture.
+ */
+
+/**
+ * Application Identifier (AID)
+ *
+ * 0xF8: 0xFX to indicate a Proprietary AID
+ * 0x49524D4163617264: ASCII encoded string "IRMAcard"
+ */
+#pragma attribute("aid", "F8 49 52 4D 41 63 61 72 64")
+
+/**
+ * DIR Record
+ *
+ * The DIR Record for a file contains information about the name of the
+ * application when loaded on the card. At application load time the content of
+ * the DIR record is entered into the smart card DIR File by MULTOS.
+ * DIR: DIRectory entry for the application list of the card
+ *
+ * 0x60 YZ: Application template (length: 0xYZ bytes)
+ *   0x4F YZ: Application identifier, AID (length: 0xYZ bytes)
+ *   0x50 YZ: Application label, human-readable identifier (length: 0xYZ bytes)
+ */
+#pragma attribute("dir", "61 15 4F 09 F8 49 52 4D 41 63 61 72 64 50 08 49 52 4D 41 63 61 72 64")
+
+/**
+ * FCI Record
+ *
+ * The File Control Information (FCI) Record contains the information that is
+ * returned when a MEL application is selected. MULTOS stores the FCI Record and
+ * returns the information if required during a Select File command.
+ *
+ * 0x6F YZ: FCI template (length: 0xYZ bytes)
+ *   0xA5 YZ: Proprietary information encoded in BER-TLV (length: 0xYZ bytes)
+ *     0x10 YZ: Sequence, version information (length: 0xYZ bytes)
+ *       0x02 01: Integer, major (length: 0x01 byte)
+ *       0x02 01: Integer, minor (length: 0x01 byte)
+ *       0x02 01: Integer, maintenance (optional, length: 0x01 byte)
+ *       0x02 01: Integer, build (optional, length: 0x01 byte)
+ *       0x10 YZ: Sequence, extra information (optional, length: 0xYZ bytes)
+ *         0x0C YZ: UTF-8 string, identifier (length: 0xYZ bytes)
+ *         0x02 01: Integer, counter (optional, length: 0x01 byte)
+ *         0x04 YZ: Octet string, data (optional, length: 0xYZ bytes)
+ */
+#pragma attribute("fci", "6F 16 A5 14 10 12 02 01 00 02 01 08 10 0A 0C 05 61 6C 70 68 61 02 01 00")
+
+#include "types.h"
+#include "types.debug.h"
+#include "APDU.h"
+#include "auth.h"
+#include "CHV.h"
+#include "debug.h"
+#include "issuance.h"
+#include "math.h"
+#include "memory.h"
+#include "logging.h"
+#include "random.h"
+#include "RSA.h"
+#include "SM.h"
+#include "sizes.h"
+#include "utils.h"
+#include "verification.h"
+
+/********************************************************************/
+/* Public segment (APDU buffer) variable declaration                */
+/********************************************************************/
+#pragma melpublic
+
+// Idemix: protocol public variables
+PublicData public;
+
+
+/********************************************************************/
+/* Session segment (application RAM memory) variable declaration    */
+/********************************************************************/
+#pragma melsession
+
+// Idemix: protocol session variables
+SessionData session;
+Credential *credential;
+
+// Secure messaging: session parameters
+SM_parameters tunnel;
+Terminal terminal;
+
+// State administration
+unsigned int state;
+
+#define STATE_ISSUE_CREDENTIAL 0x00FF
+#define STATE_ISSUE_SETUP      0x0001
+#define STATE_ISSUE_PUBLIC_KEY 0x0002
+#define STATE_ISSUE_ATTRIBUTES 0x0004
+#define STATE_ISSUE_COMMITTED  0x0008
+#define STATE_ISSUE_CHALLENGED 0x0010
+#define STATE_ISSUE_SIGNATURE  0x0020
+#define STATE_ISSUE_VERIFY     0x0040
+#define STATE_ISSUE_FINISHED   0x0080
+
+#define STATE_PROVE_CREDENTIAL 0x0F00
+#define STATE_PROVE_SETUP      0x0100
+#define STATE_PROVE_COMMITTED  0x0200
+#define STATE_PROVE_SIGNATURE  0x0400
+#define STATE_PROVE_ATTRIBUTES 0x0800
+
+#define matchState(x) \
+  ((state & (x)) != 0)
+
+#define checkState(x) \
+  if (!matchState(x)) { APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED); }
+
+#define nextState() \
+  state <<= 1
+
+
+/********************************************************************/
+/* Static segment (application EEPROM memory) variable declarations */
+/********************************************************************/
+#pragma melstatic
+
+// Idemix: credentials and master secret
+Credential credentials[MAX_CRED];
+CLMessage masterSecret;
+
+// Card holder verification: PIN
+CHV_PIN cardPIN = {
+  { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00 },
+  SIZE_CARD_PIN,
+  CHV_PIN_COUNT,
+  0x80
+};
+CHV_PIN credPIN = {
+  { 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00 },
+  SIZE_CRED_PIN,
+  CHV_PIN_COUNT,
+  0x40
+};
+
+RSA_public_key caKey;
+
+// Logging
+Log log;
+IRMALogEntry *logEntry;
+
+// ABC4Trust
+unsigned char m_challenge[SIZE_H]; /* We store here the centralized challenge received 
+                                      by the ABC4trust user-side */
+
+/* We store here the credential and device secrets */
+unsigned char secret[SIZE_SECRET_ABC] =  {0xc6,0x56,0x6b,0x48,0x35,0x3f,0x85,0x0d,0xa0,0xd4}; 
+unsigned char secret2[SIZE_SECRET_ABC] = {0x0e,0xe7,0xca,0x46,0x96,0xb2,0xad,0x6f,0xe2,0xb2};
+
+/* We store here the pseudorandomness associated to the commitments performed by
+ABC4Trust */
+unsigned char xr1[SIZE_RAND];
+unsigned char xr2[SIZE_RAND];
+
+/* XXXX: TODO: Move this to the loader and CLPublicKey */
+
+//unsigned char  modNym[] = {0xb6,0x78,0x30,0x84,0x45,0xda,0x32,0xb2,0x2e,0xfb,0x79,0xe0,0xe1, 
+//                           0x05,0x02,0x1a,0xba,0xf1,0x41,0x89,0x9b,0x1a,0xe5,0x7c,0xbc,0xd3, 
+//                           0x80,0x61,0x99,0xff,0xf0,0x63,0x4e,0xc4,0xa2,0x2f,0x60,0xdc,0xd5, 
+//                           0x5b,0x8c,0x24,0x6e,0x83,0x74,0x32,0xb2,0xf6,0x86,0x1e,0xc6,0x5b, 
+//                           0x93,0x34,0xca,0xce,0xb7,0x35,0x8a,0xfd,0x0e,0x30,0xdb,0x52,0xd3,
+//                           0x7c,0xd7,0x8d,0x02,0xf9,0x77,0xff,0x9c,0x98,0x77,0xd3,0x46,0x24,
+//                           0x91,0xe2,0xc3,0xa9,0xcb,0x77,0xa0,0xd7,0x1a,0xe3,0xae,0x37,0x05,
+//                           0x77,0xcc,0xea,0xf2,0x01,0xba,0x7d,0x91,0x81,0x3d,0xd2,0x9e,0x64,
+//                           0xd3,0xbc,0x33,0x6c,0xf0,0x0b,0xe2,0xc3,0x86,0x5e,0xf8,0x45,0x83,
+//                           0x49,0x28,0x00,0xf6,0xaa,0xf2,0x93,0xbb,0xcc,0x32,0x2b};
+
+/* Limited scope pseudonym parameters */
+
+unsigned char r_base_nym[SIZE_N]; /* This is the base utilized for computing
+the pseudonym related commitment */
+
+unsigned char r_dhgen_1[SIZE_N]; /* This is the generator utiilzed in the
+public key commitments */
+
+unsigned char r_mod_nym[SIZE_N]; /* This is the modulus utilized for
+computing the pseudonym related commitment */
+
+
+/********************************************************************/
+/* APDU handling                                                    */
+/********************************************************************/
+
+void processPINVerify(void);
+void processPINChange(void);
+void processInitialisation(void);
+void processIssuance(void);
+void processVerification(void);
+void processAdministration(void);
+void processABC4Trust(void);
+void loadABC4Trust(void);
+
+void main(void) {
+  // Check whether the APDU has been wrapped for secure messaging
+  if (APDU_wrapped) {
+    if (!CheckCase(4)) {
+      SM_ReturnSW(SW_WRONG_LENGTH);
+    }
+
+    switch (SM_APDU_unwrap(public.apdu.data, public.apdu.session, &tunnel)) {
+      case SM_ERROR_WRONG_DATA:
+        SM_ReturnSW(SW_DATA_INVALID);
+      case SM_ERROR_MAC_INVALID:
+      case SM_ERROR_PADDING_INVALID:
+        SM_ReturnSW(SW_SECURITY_STATUS_NOT_SATISFIED);
+      default:
+        debugValue("Unwrapped APDU", public.apdu.data, Lc);
+    }
+  }
+
+  switch (CLA & (0xFF ^ (CLA_SECURE_MESSAGING | CLA_COMMAND_CHAINING))) {
+
+    //////////////////////////////////////////////////////////////////
+    // Generic functionality                                        //
+    //////////////////////////////////////////////////////////////////
+
+    case CLA_ISO7816:
+      // Process the instruction
+      switch (INS) {
+
+        //////////////////////////////////////////////////////////////
+        // Authentication                                           //
+        //////////////////////////////////////////////////////////////
+
+        case INS_PERFORM_SECURITY_OPERATION:
+          if (!CheckCase(3)) {
+            APDU_returnSW(SW_WRONG_LENGTH);
+          }
+          if (P1P2 != 0x00BE) {
+            APDU_returnSW(SW_WRONG_P1P2);
+          }
+          if (public.vfyCert.offset + Lc > 768) {
+            APDU_returnSW(SW_COMMAND_NOT_ALLOWED);
+          }
+
+          // Add the incoming data to the buffer.
+          CopyBytes(Lc, public.vfyCert.cert + public.vfyCert.offset, public.apdu.data);
+          public.vfyCert.offset += Lc;
+
+          // Verify the certificate.
+          if (!APDU_chained) {
+            public.vfyCert.offset = 0;
+            if (authentication_verifyCertificate(&caKey, public.vfyCert.cert, session.auth.certBody) < 0) {
+              APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+            }
+            authentication_parseCertificate(session.auth.certBody);
+          }
+          APDU_return();
+
+        case INS_GET_CHALLENGE:
+          if (!CheckCase(1)) {
+            APDU_returnSW(SW_WRONG_LENGTH);
+          }
+
+          authentication_generateChallenge(&(session.auth.terminalKey), session.auth.challenge, public.apdu.data);
+          APDU_returnLa(RSA_MOD_BYTES);
+
+        case INS_INTERNAL_AUTHENTICATE:
+          // Perform card authentication & secure messaging setup
+          break;
+
+        //////////////////////////////////////////////////////////////
+        // Card holder verification                                 //
+        //////////////////////////////////////////////////////////////
+
+        case INS_VERIFY:
+	        debugMessage("Processing PIN verification...");
+          processPINVerify();
+          SM_return();
+
+        case INS_CHANGE_REFERENCE_DATA:
+          debugMessage("Processing PIN change...");
+          processPINChange();
+          return;
+
+        //////////////////////////////////////////////////////////////
+        // Unknown instruction byte (INS)                           //
+        //////////////////////////////////////////////////////////////
+
+        default:
+          debugWarning("Unknown instruction");
+          APDU_returnSW(SW_INS_NOT_SUPPORTED);
+      }
+
+    //////////////////////////////////////////////////////////////////
+    // Idemix functionality                                         //
+    //////////////////////////////////////////////////////////////////
+
+    case CLA_IRMACARD:
+      switch (INS & 0xF0) {
+        case 0x00:
+          debugMessage("Processing initialisation instruction...");
+          processInitialisation();
+          SM_return();
+
+        case 0x10:
+          debugMessage("Processing issuance instruction...");
+          processIssuance();
+          SM_return();
+
+        case 0x20:
+          debugMessage("Processing verification instruction...");
+          processVerification();
+          SM_return();
+
+          // setter
+        case 0x40:
+          loadABC4Trust();
+          return;
+
+          // getter
+        case 0x50:
+          debugMessage("Processing administration instruction...");
+          processABC4Trust();
+          return;
+
+        case 0x30:
+          debugMessage("Processing administration instruction...");
+          processAdministration();
+          return;
+
+        default:
+          debugWarning("Unknown instruction");
+          debugInteger("INS", INS);
+          APDU_returnSW(SW_INS_NOT_SUPPORTED);
+      }
+
+    //////////////////////////////////////////////////////////////////
+    // Unknown class byte (CLA)                                     //
+    //////////////////////////////////////////////////////////////////
+
+    default:
+      debugWarning("Unknown class");
+      debugInteger("CLA", CLA);
+      APDU_returnSW(SW_CLA_NOT_SUPPORTED);
+  }
+}
+
+void processPINVerify(void) {
+  int result;
+
+  debugMessage("INS_VERIFY");
+
+  APDU_checkP1(0x00);
+  switch (P2) {
+    case P2_CARD_PIN:
+      debugMessage("Verifying card administration PIN...");
+      result = CHV_PIN_verify(&cardPIN, Lc, public.apdu.data);
+      break;
+
+    case P2_CRED_PIN:
+      debugMessage("Verifying credential protection PIN...");
+      result = CHV_PIN_verify(&credPIN, Lc, public.apdu.data);
+      break;
+
+    default:
+      debugWarning("Unknown parameter");
+      APDU_returnSW(SW_WRONG_P1P2);
+  }
+
+  // Translate the result to the corresponding Status Word.
+  if (result == CHV_VALID) {
+    APDU_returnSW(SW_NO_ERROR);
+  } else if (result == CHV_WRONG_LENGTH) {
+    APDU_returnSW(SW_WRONG_LENGTH);
+  } else {
+    APDU_returnSW(SW_COUNTER(CHV_TRIES_LEFT * result));
+  }
+}
+
+void processPINChange(void) {
+  int result;
+
+  debugMessage("INS_CHANGE_REFERENCE_DATA");
+
+  APDU_checkP1(0x00);
+
+  switch (P2) {
+    case P2_CARD_PIN:
+      APDU_checkLength(2*SIZE_PIN_MAX);
+      debugMessage("Changing card administration PIN...");
+      result = CHV_PIN_update(&cardPIN, Lc, public.apdu.data);
+      break;
+
+    case P2_CRED_PIN:
+      if (!CHV_verified(cardPIN)) {
+        APDU_returnSW(SW_SECURITY_STATUS_NOT_SATISFIED);
+      }
+      debugMessage("Changing credential protection PIN...");
+      result = CHV_PIN_update(&credPIN, Lc, public.apdu.data);
+      break;
+
+    default:
+      debugWarning("Unknown parameter");
+      APDU_returnSW(SW_WRONG_P1P2);
+  }
+
+  // Translate the result to the corresponding Status Word.
+  if (result == CHV_VALID) {
+    APDU_returnSW(SW_NO_ERROR);
+  } else if (result == CHV_WRONG_LENGTH) {
+    APDU_returnSW(SW_WRONG_LENGTH);
+  } else {
+    APDU_returnSW(SW_COUNTER(CHV_TRIES_LEFT * result));
+  }
+}
+
+void processInitialisation(void) {
+  unsigned char flag;
+
+  switch (INS) {
+    case INS_GENERATE_SECRET:
+      debugMessage("INS_GENERATE_SECRET");
+#ifndef TEST
+      if (!(APDU_wrapped || CheckCase(1))) {
+        APDU_returnSW(SW_WRONG_LENGTH);
+      }
+
+      // Prevent reinitialisation of the master secret
+      TestZero(SIZE_M, masterSecret, flag);
+      if (flag == 0) {
+        debugWarning("Master secret is already generated");
+        APDU_returnSW(SW_COMMAND_NOT_ALLOWED_AGAIN);
+      }
+
+      // Generate a random value for the master secret
+      RandomBits(masterSecret, LENGTH_M);
+#else // TEST
+      if (!((APDU_wrapped || CheckCase(3)) && Lc == SIZE_M)) {
+        APDU_returnSW(SW_WRONG_LENGTH);
+      }
+
+      // Use the test value for the master secret
+      Copy(SIZE_M, masterSecret, public.apdu.data);
+#endif // TEST
+      debugValue("Initialised master secret", masterSecret, SIZE_M);
+      APDU_returnSW(SW_NO_ERROR);
+
+    case INS_AUTHENTICATION_SECRET:
+      debugMessage("INS_AUTHENTICATION_SECRET");
+      if (P2 != 0x00) {
+          APDU_returnSW(SW_WRONG_P1P2);
+      }
+      switch (P1) {
+        case P1_AUTH_EXPONENT + 2:
+          debugMessage("P1_AUTHENTICATION_EXPONENT");
+          if (!((APDU_wrapped || CheckCase(3)) && Lc == RSA_EXP_BYTES)) {
+            APDU_ReturnSW(SW_WRONG_LENGTH);
+          }
+
+          Copy(RSA_EXP_BYTES, caKey.exponent, public.apdu.data);
+          debugValue("Initialised rsaExponent", caKey.exponent, RSA_EXP_BYTES);
+          break;
+
+        case P1_AUTH_MODULUS + 2:
+          debugMessage("P1_AUTHENTICATION_MODULUS");
+          if (!((APDU_wrapped || CheckCase(3)) && Lc == RSA_MOD_BYTES)) {
+            APDU_ReturnSW(SW_WRONG_LENGTH);
+          }
+
+          Copy(RSA_MOD_BYTES, caKey.modulus, public.apdu.data);
+          debugValue("Initialised rsaModulus", caKey.modulus, RSA_MOD_BYTES);
+          break;
+
+        default:
+          debugWarning("Unknown parameter");
+          APDU_ReturnSW(SW_WRONG_P1P2);
+      }
+      APDU_ReturnSW(SW_NO_ERROR);
+
+    default:
+      debugWarning("Unknown instruction");
+      debugInteger("INS", INS);
+      APDU_returnSW(SW_INS_NOT_SUPPORTED);
+  }
+}
+
+
+void startIssuance(void) {
+  unsigned char i;
+
+  APDU_checkP1P2(0x0000);
+
+  // Ensure that the master secret is initiaised
+  IfZeroBytes(SIZE_M, masterSecret, RandomBits(masterSecret, LENGTH_M));
+
+  // Start a new issuance session
+  credential = NULL;
+
+  // Check policy
+  if (!auth_checkIssuance(&terminal, public.issuanceSetup.id)) {
+    APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+  }
+
+  // Locate a credential slot
+  for (i = 0; i < MAX_CRED; i++) {
+    // Reuse the existing credential slot.
+    if (credentials[i].id == public.issuanceSetup.id) {
+      debugMessage("Credential already exists");
+      if (!auth_checkOverwrite(&terminal, public.issuanceSetup.id)) {
+        debugWarning("Overwrite not allowed");
+        APDU_returnSW(SW_COMMAND_NOT_ALLOWED_AGAIN);
+      } else {
+        credential = &credentials[i];
+        break;
+      }
+
+    // Use a new credential slot
+    } else if (credentials[i].id == 0 && credential == NULL) {
+      debugMessage("Found empty slot");
+      credential = &credentials[i];
+    }
+  }
+
+  // No credential slot selected, out of space
+  if (credential == NULL) {
+    debugWarning("Cannot issue another credential");
+    APDU_returnSW(SW_COMMAND_NOT_ALLOWED);
+  }
+
+  // Initialise the credential
+  credential->id = public.issuanceSetup.id;
+  credential->size = public.issuanceSetup.size;
+  credential->issuerFlags = public.issuanceSetup.flags;
+  Copy(SIZE_H, credential->proof.context, public.issuanceSetup.context);
+  debugHash("Initialised context", credential->proof.context);
+
+  // Create new log entry
+  logEntry = (IRMALogEntry*) log_new_entry(&log);
+  Copy(SIZE_TIMESTAMP, logEntry->timestamp, public.issuanceSetup.timestamp);
+  Copy(AUTH_TERMINAL_ID_BYTES, logEntry->terminal, terminal.id);
+  logEntry->action = ACTION_ISSUE;
+  logEntry->credential = credential->id;
+
+  // Initialise the issuance state
+  state = STATE_ISSUE_SETUP;
+}
+
+void processIssuance(void) {
+
+  // Issuance requires the terminal to be authenticated.
+  /* Implicit due to the fact that we've got a secure tunnel. */
+
+  // Issuance requires the credential PIN to be verified.
+  if (!CHV_verified(credPIN)) {
+    APDU_returnSW(SW_SECURITY_STATUS_NOT_SATISFIED);
+  }
+
+  // Special case: start issuance
+  if (INS == INS_ISSUE_CREDENTIAL) {
+    debugMessage("INS_ISSUE_CREDENTIAL");
+    APDU_checkLength(sizeof(IssuanceSetup));
+
+    startIssuance();
+
+  // All other issuance commands
+  } else {
+
+    // A credential should be selected for issuance
+    if (credential == NULL || !matchState(STATE_ISSUE_CREDENTIAL)) {
+      APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+    }
+
+    switch (INS) {
+      case INS_ISSUE_PUBLIC_KEY:
+        debugMessage("INS_ISSUE_PUBLIC_KEY");
+        if (matchState(STATE_ISSUE_SETUP)) {
+          nextState();
+        }
+        checkState(STATE_ISSUE_PUBLIC_KEY);
+        APDU_checkLength(SIZE_N);
+
+        switch (P1) {
+          case P1_PUBLIC_KEY_N:
+            debugMessage("P1_PUBLIC_KEY_N");
+            Copy(SIZE_N, credential->issuerKey.n, public.apdu.data);
+            debugNumber("Initialised isserKey.n", credential->issuerKey.n);
+            break;
+
+          case P1_PUBLIC_KEY_Z:
+            debugMessage("P1_PUBLIC_KEY_Z");
+            Copy(SIZE_N, credential->issuerKey.Z, public.apdu.data);
+            debugNumber("Initialised isserKey.Z", credential->issuerKey.Z);
+            break;
+
+          case P1_PUBLIC_KEY_S:
+            debugMessage("P1_PUBLIC_KEY_S");
+            Copy(SIZE_N, credential->issuerKey.S, public.apdu.data);
+            debugNumber("Initialised isserKey.S", credential->issuerKey.S);
+            ComputeS_(credential, public.issue.buffer.data);
+            debugNumber("Initialised isserKey.S_", credential->issuerKey.S_);
+            break;
+
+          case P1_PUBLIC_KEY_R:
+            debugMessage("P1_PUBLIC_KEY_R");
+            APDU_checkP2upper(credential->size + 1);
+            Copy(SIZE_N, credential->issuerKey.R[P2], public.apdu.data);
+            debugIndexedNumber("Initialised isserKey.R", credential->issuerKey.R, P2);
+            break;
+
+          default:
+            debugWarning("Unknown parameter");
+            debugInteger("P1", P1);
+            APDU_returnSW(SW_WRONG_P1P2);
+        }
+        APDU_return();
+
+      case INS_ISSUE_ATTRIBUTES:
+        debugMessage("INS_ISSUE_ATTRIBUTES");
+        if (matchState(STATE_ISSUE_PUBLIC_KEY) && issuance_checkPublicKey(credential)) {
+          nextState();
+        }
+        checkState(STATE_ISSUE_ATTRIBUTES);
+        APDU_checkLength(SIZE_M);
+        APDU_checkP1range(1, credential->size);
+        IfZero(SIZE_M, public.apdu.data,
+          debugWarning("Attribute cannot be empty");
+          APDU_returnSW(SW_WRONG_DATA);
+        );
+
+        Copy(SIZE_M, credential->attribute[P1 - 1], public.apdu.data);
+        debugIndexedCLMessage("Initialised attribute", credential->attribute, P1 - 1);
+        APDU_return();
+
+      case INS_ISSUE_COMMITMENT:
+        debugMessage("INS_ISSUE_COMMITMENT");
+        if (!matchState(STATE_ISSUE_ATTRIBUTES) && !issuance_checkAttributes(credential)) {
+          APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+        }
+        APDU_checkLength(SIZE_STATZK);
+
+        Copy(SIZE_STATZK, public.issue.nonce, public.apdu.data);
+        debugNonce("Initialised nonce", public.issue.nonce);
+        constructCommitment(credential, &masterSecret[0]);
+        debugNumber("Returned U", public.apdu.data);
+
+        nextState();
+        APDU_returnLa(SIZE_N);
+
+      case INS_ISSUE_COMMITMENT_PROOF:
+        debugMessage("INS_ISSUE_COMMITMENT_PROOF");
+        checkState(STATE_ISSUE_COMMITTED);
+        APDU_checkLength(0);
+
+        switch (P1) {
+          case P1_PROOF_C:
+            debugMessage("P1_COMMITMENT_PROOF_C");
+            Copy(SIZE_H, public.apdu.data, session.issue.challenge);
+            debugHash("Returned c", public.apdu.data);
+            APDU_returnLa(SIZE_H);
+
+          case P1_PROOF_VPRIMEHAT:
+            debugMessage("P1_COMMITMENT_PROOF_VPRIMEHAT");
+            Copy(SIZE_VPRIME_, public.apdu.data, session.issue.vPrimeHat);
+            debugValue("Returned vPrimeHat", public.apdu.data, SIZE_VPRIME_);
+            APDU_returnLa(SIZE_VPRIME_);
+
+          case P1_PROOF_SHAT:
+            debugMessage("P1_COMMITMENT_PROOF_SHAT");
+            Copy(SIZE_S_, public.apdu.data, session.issue.sHat);
+            debugValue("Returned s_A", public.apdu.data, SIZE_S_);
+            APDU_returnLa(SIZE_S_);
+
+          default:
+            debugWarning("Unknown parameter");
+            debugInteger("P1", P1);
+            APDU_returnSW(SW_WRONG_P1P2);
+        }
+
+      case INS_ISSUE_CHALLENGE:
+        debugMessage("INS_ISSUE_CHALLENGE");
+        checkState(STATE_ISSUE_COMMITTED);
+        APDU_checkLength(0);
+
+        Copy(SIZE_STATZK, public.apdu.data, credential->proof.nonce);
+        debugNonce("Returned nonce", public.apdu.data);
+
+        nextState();
+        APDU_returnLa(SIZE_STATZK);
+
+      case INS_ISSUE_SIGNATURE:
+        debugMessage("INS_ISSUE_SIGNATURE");
+        if (matchState(STATE_ISSUE_CHALLENGED)) {
+          nextState();
+        }
+        checkState(STATE_ISSUE_SIGNATURE);
+
+        switch(P1) {
+          case P1_SIGNATURE_A:
+            debugMessage("P1_SIGNATURE_A");
+            APDU_checkLength(SIZE_N);
+            Copy(SIZE_N, credential->signature.A, public.apdu.data);
+            debugNumber("Initialised signature.A", credential->signature.A);
+            break;
+
+          case P1_SIGNATURE_E:
+            debugMessage("P1_SIGNATURE_E");
+            APDU_checkLength(SIZE_E);
+            Copy(SIZE_E, credential->signature.e, public.apdu.data);
+            debugValue("Initialised signature.e", credential->signature.e, SIZE_E);
+            break;
+
+          case P1_SIGNATURE_V:
+            debugMessage("P1_SIGNATURE_V");
+            APDU_checkLength(SIZE_V);
+            constructSignature(credential);
+            debugValue("Initialised signature.v", credential->signature.v, SIZE_V);
+            break;
+
+          case P1_SIGNATURE_PROOF_C:
+            debugMessage("P1_SIGNATURE_PROOF_C");
+            APDU_checkLength(SIZE_H);
+            Copy(SIZE_H, credential->proof.challenge, public.apdu.data);
+            debugHash("Initialised c", credential->proof.challenge);
+            break;
+
+          case P1_SIGNATURE_PROOF_S_E:
+            debugMessage("P1_SIGNATURE_PROOF_S_E");
+            APDU_checkLength(SIZE_N);
+            Copy(SIZE_N, credential->proof.response, public.apdu.data);
+            debugNumber("Initialised s_e", credential->proof.response);
+            break;
+
+          default:
+            debugWarning("Unknown parameter");
+            APDU_returnSW(SW_WRONG_P1P2);
+        }
+        APDU_return();
+
+      case INS_ISSUE_VERIFY:
+        if (matchState(STATE_ISSUE_SIGNATURE) && issuance_checkSignature(credential)) {
+          nextState();
+        }
+        checkState(STATE_ISSUE_VERIFY);
+
+        if (!verifySignature(credential, &masterSecret[0], &session.vfySig)) {
+          debugWarning("Signature invalid");
+          APDU_returnSW(SW_DATA_INVALID);
+        }
+        if (!verifyProof(credential, &session.vfyPrf, &public.vfyPrf)) {
+          debugWarning("Proof invalid");
+          APDU_returnSW(SW_DATA_INVALID);
+        }
+
+        nextState();
+        APDU_return();
+
+      default:
+        debugWarning("Unknown instruction");
+        debugInteger("INS", INS);
+        APDU_returnSW(SW_INS_NOT_SUPPORTED);
+    }
+  }
+}
+
+void startVerification(void) {
+  unsigned char i;
+
+  APDU_checkP1P2(0x0000);
+
+  // Start a new verification session
+  credential = NULL;
+  ClearBytes(sizeof(VerificationSession), &(session.prove));
+
+  // Check policy
+  if (!auth_checkSelection(&terminal, public.verificationSetup.id, public.verificationSetup.selection)) {
+    APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+  }
+
+  // Lookup the credential slot
+  for (i = 0; i < MAX_CRED; i++) {
+    if (credentials[i].id == public.verificationSetup.id) {
+      credential = &credentials[i];
+    }
+  }
+
+  // No credential slot selected,
+  if (credential == NULL) {
+    debugWarning("Credential not found");
+    APDU_returnSW(SW_REFERENCED_DATA_NOT_FOUND);
+  }
+
+  // Check selection validity
+  if (verifySelection(credential, public.verificationSetup.selection) < 0) {
+    credential = NULL;
+    APDU_returnSW(SW_WRONG_DATA);
+  }
+
+  // Check PIN protection
+  if (verifyProtection(credential, public.verificationSetup.selection) && !CHV_verified(credPIN)) {
+    credential = NULL;
+    APDU_returnSW(SW_SECURITY_STATUS_NOT_SATISFIED);
+  }
+
+  // Initialise the session
+  session.prove.disclose = public.verificationSetup.selection;
+  Copy(SIZE_H, public.prove.context, public.verificationSetup.context);
+  debugHash("Initialised context", public.prove.context);
+
+  // Create new log entry
+  logEntry = (IRMALogEntry*) log_new_entry(&log);
+  Copy(SIZE_TIMESTAMP, logEntry->timestamp, public.verificationSetup.timestamp);
+  Copy(AUTH_TERMINAL_ID_BYTES, logEntry->terminal, terminal.id);
+  logEntry->action = ACTION_PROVE;
+  logEntry->credential = credential->id;
+  logEntry->details.prove.selection = session.prove.disclose;
+
+  state = STATE_PROVE_CREDENTIAL;
+}
+
+void processVerification(void) {
+
+  // Verification requires the terminal to be authenticated.
+  /* Implicit due to the fact that we've got a secure tunnel. */
+
+  // Special case: start verification
+  if (INS == INS_PROVE_CREDENTIAL) {
+    debugMessage("INS_PROVE_CREDENTIAL");
+    APDU_checkLength(sizeof(VerificationSetup));
+
+    startVerification();
+
+  // All other verification commands
+  } else {
+
+    // A credential should be selected for verification
+    if (credential == NULL || !matchState(STATE_PROVE_CREDENTIAL)) {
+      APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+    }
+
+    switch (INS) {
+      case INS_PROVE_COMMITMENT:
+        debugMessage("INS_PROVE_COMMITMENT");
+        checkState(STATE_PROVE_SETUP);
+        APDU_checkLength(SIZE_STATZK);
+
+        constructProof(credential, &masterSecret[0]);
+        debugHash("Returned c", public.apdu.data);
+
+        nextState();
+        APDU_returnLa(SIZE_H);
+
+      case INS_PROVE_SIGNATURE:
+        debugMessage("INS_PROVE_SIGNATURE");
+        if (matchState(STATE_PROVE_COMMITTED)) {
+          nextState();
+        }
+        checkState(STATE_PROVE_SIGNATURE);
+
+        switch(P1) {
+          case P1_SIGNATURE_A:
+            debugMessage("P1_SIGNATURE_A");
+            if (!(APDU_wrapped || CheckCase(1))) {
+              APDU_returnSW(SW_WRONG_LENGTH);
+            }
+
+            Copy(SIZE_N, public.apdu.data, public.prove.APrime);
+            debugNumber("Returned A'", public.apdu.data);
+            APDU_returnLa(SIZE_N);
+
+          case P1_SIGNATURE_E:
+            debugMessage("P1_SIGNATURE_E");
+            if (!(APDU_wrapped || CheckCase(1))) {
+              APDU_returnSW(SW_WRONG_LENGTH);
+            }
+
+            Copy(SIZE_E_, public.apdu.data, public.prove.eHat);
+            debugValue("Returned e^", public.apdu.data, SIZE_E_);
+            APDU_returnLa(SIZE_E_);
+
+          case P1_SIGNATURE_V:
+            debugMessage("P1_SIGNATURE_V");
+            if (!(APDU_wrapped || CheckCase(1))) {
+              APDU_returnSW(SW_WRONG_LENGTH);
+            }
+
+            Copy(SIZE_V_, public.apdu.data, public.prove.vHat);
+            debugValue("Returned v^", public.apdu.data, SIZE_V_);
+            APDU_returnLa(SIZE_V_);
+
+          default:
+            debugWarning("Unknown parameter");
+            APDU_returnSW(SW_WRONG_P1P2);
+        }
+
+      case INS_PROVE_ATTRIBUTE:
+        debugMessage("INS_PROVE_ATTRIBUTE");
+        if (matchState(STATE_PROVE_SIGNATURE)) {
+          nextState();
+        }
+        checkState(STATE_PROVE_ATTRIBUTES);
+        APDU_checkLength(0);
+        if (P1 > credential->size) {
+          APDU_returnSW(SW_WRONG_P1P2);
+        }
+
+        if (disclosed(P1)) {
+          Copy(SIZE_M, public.apdu.data, credential->attribute[P1 - 1]);
+          debugValue("Returned attribute", public.apdu.data, SIZE_M);
+          APDU_returnLa(SIZE_M);
+        } else {
+          Copy(SIZE_M_, public.apdu.data, session.prove.mHat[P1]);
+          debugValue("Returned response", public.apdu.data, SIZE_M_);
+          APDU_returnLa(SIZE_M_);
+        }
+      default:
+        // TODO: unknown
+        APDU_returnSW(SW_INS_NOT_SUPPORTED);
+    }
+  }
+}
+
+void processAdministration(void) {
+  unsigned char i;
+
+  if (!CHV_verified(cardPIN)) {
+    APDU_returnSW(SW_SECURITY_STATUS_NOT_SATISFIED);
+  }
+
+  switch (INS) {
+    case INS_ADMIN_CREDENTIALS:
+      debugMessage("INS_ADMIN_CREDENTIALS");
+      if (!CheckCase(1)) {
+        APDU_ReturnSW(SW_WRONG_LENGTH);
+      }
+      APDU_checkP1P2(0x0000);
+
+      for (i = 0; i < MAX_CRED; i++) {
+        ((short*) public.apdu.data)[i] = credentials[i].id;
+      }
+
+      APDU_returnLa(2*MAX_CRED);
+
+    case INS_ADMIN_CREDENTIAL:
+      debugMessage("INS_ADMIN_CREDENTIAL");
+
+      APDU_checkP1P2(0x0000);
+      APDU_checkLength(sizeof(AdminSelect));
+
+      // Lookup the given credential ID and select it if it exists
+      for (i = 0; i < MAX_CRED; i++) {
+        if (credentials[i].id == public.adminSelect.id) {
+          credential = &credentials[i];
+          APDU_returnSW(SW_NO_ERROR);
+        }
+      }
+      APDU_returnSW(SW_REFERENCED_DATA_NOT_FOUND);
+
+    case INS_ADMIN_ATTRIBUTE:
+      debugMessage("INS_ADMIN_ATTRIBUTE");
+      if (credential == NULL) {
+        APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+      }
+
+      if (P1 == 0 || P1 > credential->size) {
+        APDU_returnSW(SW_WRONG_P1P2);
+      }
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      Copy(SIZE_M, public.apdu.data, credential->attribute[P1 - 1]);
+      debugValue("Returned attribute", public.apdu.data, SIZE_M);
+      APDU_returnLa(SIZE_M);
+
+    case INS_ADMIN_REMOVE:
+      debugMessage("INS_ADMIN_REMOVE");
+      if (credential == NULL) {
+        APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+      }
+
+      APDU_checkP1P2(0x0000);
+      APDU_checkLength(sizeof(AdminRemove));
+
+      debugInteger("Removing credential", credential->id);
+      ClearCredential(credential);
+      debugMessage("Removed credential");
+
+      // Create new log entry
+      logEntry = (IRMALogEntry*) log_new_entry(&log);
+      Copy(SIZE_TIMESTAMP, logEntry->timestamp, public.adminRemove.timestamp);
+      Copy(AUTH_TERMINAL_ID_BYTES, logEntry->terminal, terminal.id);
+      logEntry->action = ACTION_REMOVE;
+      logEntry->credential = P1P2;
+
+      APDU_return();
+
+    case INS_ADMIN_FLAGS:
+      debugMessage("INS_ADMIN_FLAGS");
+      if (credential == NULL) {
+        APDU_returnSW(SW_CONDITIONS_NOT_SATISFIED);
+      }
+
+      APDU_checkP1P2(0x0000);
+      APDU_checkLength(sizeof(CredentialFlags));
+
+      if (Lc > 0) {
+        credential->userFlags = public.adminFlags.user;
+        debugValue("Updated flags", (ByteArray) credential->userFlags.protect, sizeof(CredentialFlags));
+        APDU_return();
+      } else {
+        public.adminFlags.user = credential->userFlags;
+        public.adminFlags.issuer = credential->issuerFlags;
+        debugValue("Returned flags", public.apdu.data, 2 * sizeof(CredentialFlags));
+        APDU_returnLa(2 * sizeof(CredentialFlags));
+      }
+
+    case INS_ADMIN_LOG:
+      debugMessage("INS_ADMIN_LOG");
+
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      for (i = 0; i < 255 / sizeof(LogEntry); i++) {
+        memcpy(public.apdu.data + i*sizeof(LogEntry), log_get_entry(&log, P1 + i), sizeof(LogEntry));
+      }
+      APDU_returnLa((255 / sizeof(LogEntry)) * sizeof(LogEntry));
+
+    //////////////////////////////////////////////////////////////
+    // Unknown instruction byte (INS)                           //
+    //////////////////////////////////////////////////////////////
+
+    default:
+      debugWarning("Unknown instruction");
+      debugInteger("CLA", CLA);
+      debugInteger("INS", INS);
+      debugInteger("P1", P1);
+      debugInteger("P2", P2);
+      debugInteger("Lc", Lc);
+      debugValue("data", public.apdu.data, Lc);
+      APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+      break;
+  }
+}
+
+/**
+*
+* This methods perform the randomization of the (A, e, v) triple
+* and the generation of the t- and s-values in the key binding case
+* of ABC4Trust. Given that the generation of the challenge is centralized
+* it is expected when generating the first and second s-value.	
+*
+* In this case, we only rely on one credential and support domain
+* pseudonyms together with public key commitments.
+*
+*/
+
+void processABC4Trust(void) {
+  unsigned char i;
+  unsigned int rA_size;
+  unsigned int rA_offset;
+
+  switch (INS) {
+    
+    case INS_GET_S_1:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_H);
+
+      credential = &credentials[0];
+
+      Copy(SIZE_H, m_challenge, public.apdu.data);
+      
+      gen_s_value_1();
+
+      Copy(SIZE_RAND, public.apdu.data, public.prove.buffer.data);
+      APDU_returnLa(SIZE_RAND);
+      break;
+      
+    case INS_GET_S_2:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_H);
+
+      credential = &credentials[0];
+
+      Copy(SIZE_H, m_challenge, public.apdu.data);
+      
+      gen_s_value_2();
+
+      Copy(SIZE_RAND, public.apdu.data, public.prove.buffer.data);
+      APDU_returnLa(SIZE_RAND);
+      break;
+      
+    case INS_GET_COM:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+
+      ModExp(SIZE_RAND, SIZE_N, xr1, credential->issuerKey.n, credential->issuerKey.D, public.prove.buffer.number[0]);
+      ModExp(SIZE_RAND, SIZE_N, xr2, credential->issuerKey.n, credential->issuerKey.S, public.prove.buffer.number[1]);
+
+      ModMul(SIZE_N, public.prove.buffer.number[0], public.prove.buffer.number[1], credential->issuerKey.n);
+
+      Copy(SIZE_N, public.apdu.data, public.prove.buffer.number[0]);
+      APDU_returnLa(SIZE_N);
+      break;
+
+    case INS_GET_NYM:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      ModExp(SIZE_RAND, SIZE_N, xr1, r_mod_nym, r_base_nym, public.apdu.data); 
+
+      APDU_returnLa(SIZE_N);
+      break;
+
+    case INS_GET_PK:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      ModExp(SIZE_RAND, SIZE_N, xr1, r_mod_nym, r_dhgen_1, public.apdu.data); 
+      APDU_returnLa(SIZE_N);
+ 
+      break;
+ 
+    case INS_GET_RANDOM_A:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+
+      RandomBits(public.prove.rA, SIZE_R_A_ABC*8);
+
+      ModExpSpecial(credential, SIZE_R_A_ABC, public.prove.rA, public.prove.APrime, public.prove.buffer.number[0]);
+      ModMul(SIZE_N, public.prove.APrime, credential->signature.A, credential->issuerKey.n);
+
+      Copy(SIZE_N, public.apdu.data, public.prove.APrime);
+      APDU_returnLa(SIZE_N);
+ 
+      break;
+
+    case INS_GEN_RANDOM:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      /* We set xr1 and xr2 here */
+      
+      RandomBits(xr1, SIZE_RAND);
+      RandomBits(xr2, SIZE_RAND);
+
+      APDU_returnSW(SW_NO_ERROR);
+ 
+      break;
+
+    case INS_GET_RANDOM_V:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      // Compute v' = v - e*r_A
+      crypto_compute_vPrimeABC4trust(); 
+  
+      Copy(SIZE_V, public.apdu.data, public.prove.buffer.data);
+      APDU_returnLa(SIZE_V);
+
+      break;
+            
+    case INS_GET_BASE:
+
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+
+      Copy(SIZE_N, public.apdu.data, credential->issuerKey.R[P1]);
+      APDU_returnLa(SIZE_N);
+      break;
+
+    case INS_GET_IPK:      
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* T */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.T);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x01: /* D */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.D);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x02: /* M */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.n);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x03: /* Z */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.Z);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x04: /* S */
+        Copy(SIZE_N, public.apdu.data, credential->issuerKey.S);
+        APDU_returnLa(SIZE_N);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      APDU_returnLa(SIZE_N);
+      break;
+
+     case INS_GET_ATTR:
+      APDU_checkP2(0x00);
+      APDU_checkLength(0);
+
+      credential = &credentials[0];
+      
+      Copy(SIZE_N, public.apdu.data, credential->attribute[P1 + 1]);
+      APDU_returnLa(SIZE_M);
+      break;
+
+    case INS_GET_SIG:
+      APDU_checkP2(0x00);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* A */
+        Copy(SIZE_N, public.apdu.data, credential->signature.A);
+        APDU_returnLa(SIZE_N);
+        break;
+       case 0x01: /* e */
+        Copy(SIZE_E, public.apdu.data, credential->signature.e);
+        APDU_returnLa(SIZE_E);
+        break;
+       case 0x02: /* v */
+        Copy(SIZE_V, public.apdu.data, credential->signature.v);
+        APDU_returnLa(SIZE_V);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      
+      break;
+
+    default:
+      debugWarning("Unknown instruction");
+      debugInteger("CLA", CLA);
+      debugInteger("INS", INS);
+      debugInteger("P1", P1);
+      debugInteger("P2", P2);
+      debugInteger("Lc", Lc);
+      debugValue("data", public.apdu.data, Lc);
+      APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+      break;
+  }
+}
+
+/*
+*
+* This method groups all the instructions related
+* to the loading process of the ABC4Trust parameters.
+*
+*/
+
+void loadABC4Trust(void) {
+  unsigned char i;
+
+  switch (INS) {
+    case INS_SET_BASE:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_N);
+
+      credential = &credentials[0];
+      
+      Copy(SIZE_N, credential->issuerKey.R[P1], public.apdu.data);
+      break;
+
+    case INS_SET_IPK:
+      APDU_checkP2(0x00);
+      APDU_checkLength(SIZE_N);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* T */
+        Copy(SIZE_N, credential->issuerKey.T, public.apdu.data);
+        break;
+       case 0x01: /* D */
+        Copy(SIZE_N, credential->issuerKey.D, public.apdu.data);
+        break;
+       case 0x02: /* M */
+        Copy(SIZE_N, credential->issuerKey.n, public.apdu.data);
+        break;
+       case 0x03: /* Z */
+        Copy(SIZE_N, credential->issuerKey.Z, public.apdu.data);
+        break;
+       case 0x04: /* S */
+        Copy(SIZE_N, credential->issuerKey.S, public.apdu.data);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      
+      break;
+
+    case INS_SET_ATTR:
+      APDU_checkP2(0x00);
+
+      if (P1 == 0) {
+       APDU_checkLength(SIZE_N);
+       Copy(SIZE_N, r_base_nym, public.apdu.data);
+      } else if (P1 == 1) {
+       APDU_checkLength(SIZE_N);
+       Copy(SIZE_N, r_dhgen_1, public.apdu.data);
+      } else {
+       APDU_checkLength(SIZE_N);
+       Copy(SIZE_N, r_mod_nym, public.apdu.data);      
+      }
+      
+      break;
+
+    case INS_SET_SIG:
+      APDU_checkP2(0x00);
+
+      credential = &credentials[0];
+      
+      switch (P1) {
+       case 0x00: /* A */
+        APDU_checkLength(SIZE_N);
+        Copy(SIZE_N, credential->signature.A, public.apdu.data);
+        break;
+       case 0x01: /* e */
+        APDU_checkLength(SIZE_E);
+        Copy(SIZE_E, credential->signature.e, public.apdu.data);
+        break;
+       case 0x02: /* v */
+        APDU_checkLength(SIZE_V);
+        Copy(SIZE_V, credential->signature.v, public.apdu.data);
+        break;
+       default:
+        debugWarning("Unknown instruction");
+        APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+        break;
+      }
+      
+      break;
+    
+    default:
+      debugWarning("Unknown instruction");
+      debugInteger("CLA", CLA);
+      debugInteger("INS", INS);
+      debugInteger("P1", P1);
+      debugInteger("P2", P2);
+      debugInteger("Lc", Lc);
+      debugValue("data", public.apdu.data, Lc);
+      APDU_ReturnSW(SW_INS_NOT_SUPPORTED);
+      break;
+}
+}
+
diff -uNr irma_card/src/verification.c integration/src/verification.c
--- irma_card/src/verification.c	2014-09-03 14:58:34.851038814 +0200
+++ integration/src/verification.c	2014-09-03 15:01:09.061949575 +0200
@@ -108,10 +108,9 @@
   debugValue("rA", public.prove.rA, SIZE_R_A);
 
   // Compute A' = A * S^r_A
-  ModExpSpecial(credential, SIZE_R_A, public.prove.rA, public.prove.APrime, public.prove.buffer.number[0]);
-  debugValue("A' = S^r_A mod n", public.prove.APrime, SIZE_N);
+//  ModExpSpecial(credential, SIZE_R_A - 10, public.prove.rA, public.prove.APrime, public.prove.buffer.number[0]);
+//  ModExpSpecial(credential, SIZE_R_A - 13, r_val, public.prove.APrime, public.prove.buffer.number[0]);
   ModMul(SIZE_N, public.prove.APrime, credential->signature.A, credential->issuerKey.n);
-  debugValue("A' = A' * A mod n", public.prove.APrime, SIZE_N);
 
   // Compute ZTilde = A'^eTilde * S^vTilde * (R[i]^mTilde[i] foreach i not in D)
   ModExpSpecial(credential, SIZE_V_, public.prove.vHat, public.prove.buffer.number[0], public.prove.buffer.number[1]);
@@ -162,3 +161,4 @@
 
   // return eHat, vHat, mHat[i], c, A'
 }
+
